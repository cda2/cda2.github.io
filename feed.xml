<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://cda2.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://cda2.github.io/" rel="alternate" type="text/html" hreflang="ko" /><updated>2024-06-13T02:44:46+00:00</updated><id>https://cda2.github.io/feed.xml</id><title type="html">cda2</title><subtitle>삽질 기록 일지</subtitle><author><name>cda2</name></author><entry><title type="html">Scrapy는 종료 시점에 Item 을 Yield 할 수 없는가</title><link href="https://cda2.github.io/scrapy/2024/06/12/Scrapy%EB%8A%94-%EC%A2%85%EB%A3%8C-%EC%8B%9C%EC%A0%90%EC%97%90-Item%EC%9D%84-Yield-%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94%EA%B0%80.html" rel="alternate" type="text/html" title="Scrapy는 종료 시점에 Item 을 Yield 할 수 없는가" /><published>2024-06-12T16:10:51+00:00</published><updated>2024-06-12T16:10:51+00:00</updated><id>https://cda2.github.io/scrapy/2024/06/12/Scrapy%EB%8A%94%20%EC%A2%85%EB%A3%8C%20%EC%8B%9C%EC%A0%90%EC%97%90%20Item%EC%9D%84%20Yield%20%ED%95%A0%20%EC%88%98%20%EC%97%86%EB%8A%94%EA%B0%80</id><content type="html" xml:base="https://cda2.github.io/scrapy/2024/06/12/Scrapy%EB%8A%94-%EC%A2%85%EB%A3%8C-%EC%8B%9C%EC%A0%90%EC%97%90-Item%EC%9D%84-Yield-%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94%EA%B0%80.html"><![CDATA[<h2 id="개요">개요</h2>

<p><code class="language-plaintext highlighter-rouge">Scrapy</code> 프레임워크는 특성 상 종료 시점에 <code class="language-plaintext highlighter-rouge">Item</code> 을 <code class="language-plaintext highlighter-rouge">Yield</code> 할 수 없는데, 간단한 우회법으로 이를 가능하게 해본다.</p>

<h2 id="tldr">TL;DR</h2>

<p>최소 두 가지 기능을 사용하면 **상당히 지저분하지만
** 아키텍처나 Scrapy의 기본 구조를 뒤집어 엎지 않고도 종료 시점에 <code class="language-plaintext highlighter-rouge">Item</code>을 <code class="language-plaintext highlighter-rouge">Yield</code> 처리 할 수 있다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">Scrapy</code> 프레임워크 내부에 있는 <a href="https://github.com/scrapy/scrapy/blob/1282ddf8f77299edf613679c2ee0b606e96808ce/scrapy/core/scraper.py#L110">Scraper</a> 를 사용할 것</li>
  <li><code class="language-plaintext highlighter-rouge">Twisted</code> 의 <a href="https://docs.twisted.org/en/stable/core/howto/defer.html">Deferred</a> 객체를 사용하여 Signal 기반으로 처리할 것</li>
</ol>

<p>여러가지 방법이 있지만, 위의 절차를 가장 쉽고 빠르게 적용할 수 있는 방법은 다음과 같다.</p>

<ol>
  <li>Scraper 클래스의 <a href="https://github.com/scrapy/scrapy/blob/1282ddf8f77299edf613679c2ee0b606e96808ce/scrapy/core/scraper.py#L272-L308"><code class="language-plaintext highlighter-rouge">handle_spider_output</code></a> 메서드를 적용한다.</li>
  <li>적용한 결과는 <code class="language-plaintext highlighter-rouge">Deferred</code> 객체이므로 이를 시그널 처리가 가능한 메서드 단에서 반환한다.</li>
</ol>

<ul>
  <li><code class="language-plaintext highlighter-rouge">close_spider</code> 메서드는 <code class="language-plaintext highlighter-rouge">Deferred</code> 기반의 시그널 처리를 지원한다.</li>
  <li><code class="language-plaintext highlighter-rouge">from_crawler</code> 등에서 시그널 연결을 기본적으로 지원하므로, 구현하기 편리하다.</li>
</ul>

<p>간단한 단 건 처리 예시를 작성해보면 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="p">...</span>
	<span class="k">def</span> <span class="nf">close_spider</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Deferred</span>
		<span class="p">...</span>
		<span class="n">item</span><span class="p">:</span> <span class="n">Item</span> <span class="o">=</span> <span class="n">Item</span><span class="p">(...)</span>
		<span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">item</span><span class="p">]</span>
		<span class="n">fake_req</span><span class="p">:</span> <span class="n">Request</span> <span class="o">=</span> <span class="n">Request</span><span class="p">(...)</span>
		<span class="n">fake_res</span><span class="p">:</span> <span class="n">Response</span> <span class="o">=</span> <span class="n">Response</span><span class="p">(...)</span>
		<span class="n">item_dfd</span><span class="p">:</span> <span class="n">Deferred</span> <span class="o">=</span> <span class="n">spider</span><span class="p">.</span><span class="n">crawler</span><span class="p">.</span><span class="n">engine</span><span class="p">.</span><span class="n">scraper</span><span class="p">.</span><span class="n">handle_spider_output</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">fake_req</span><span class="p">,</span> <span class="n">fake_res</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">item_dfd</span>
</code></pre></div></div>

<p>여러 건을 한 번에 처리해야 하는 케이스를 작성해보면 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="p">...</span>
	<span class="k">def</span> <span class="nf">close_spider</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Deferred</span>
		<span class="p">...</span>
		<span class="n">items</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="n">Item</span><span class="p">]</span> <span class="o">=</span> <span class="p">[...]</span>
		<span class="n">fake_req</span><span class="p">:</span> <span class="n">Request</span> <span class="o">=</span> <span class="n">Request</span><span class="p">(...)</span>
		<span class="n">fake_res</span><span class="p">:</span> <span class="n">Response</span> <span class="o">=</span> <span class="n">Response</span><span class="p">(...)</span>
		<span class="n">parallel_item_dfd</span><span class="p">:</span> <span class="n">Deferred</span> <span class="o">=</span> <span class="n">spider</span><span class="p">.</span><span class="n">crawler</span><span class="p">.</span><span class="n">engine</span><span class="p">.</span><span class="n">scraper</span><span class="p">.</span><span class="n">handle_spider_output</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">fake_req</span><span class="p">,</span> <span class="n">fake_res</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">parallel_item_dfd</span>

</code></pre></div></div>

<p>여러 건을 나누어서 (페이징 등) 처리해야 하는 케이스를 작성해보면 다음과 같다.</p>

<ul>
  <li>원격 DB 를 사용하고 있어, 데이터베이스에 부하를 줄이려는 목적 등의 경우 사용</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">twisted.internet.defer</span> <span class="kn">import</span> <span class="n">gatherResults</span>
	<span class="p">...</span>
	<span class="k">def</span> <span class="nf">close_spider</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Deferred</span>
		<span class="p">...</span>
		<span class="n">dfd_list</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="n">Deferred</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
		<span class="n">batch_size</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="p">...</span>
		<span class="n">fake_req</span><span class="p">:</span> <span class="n">Request</span> <span class="o">=</span> <span class="n">Request</span><span class="p">(...)</span>
		<span class="n">fake_res</span><span class="p">:</span> <span class="n">Response</span> <span class="o">=</span> <span class="n">Response</span><span class="p">(...)</span>

		<span class="k">for</span> <span class="n">batch</span> <span class="ow">in</span> <span class="p">...:</span>
			<span class="n">items</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="n">Item</span><span class="p">]</span> <span class="o">=</span> <span class="p">[...]</span>
			<span class="n">part_parallel_dfd</span><span class="p">:</span> <span class="n">Deferred</span> <span class="o">=</span> <span class="n">spider</span><span class="p">.</span><span class="n">crawler</span><span class="p">.</span><span class="n">engine</span><span class="p">.</span><span class="n">scraper</span><span class="p">.</span><span class="n">handle_spider_output</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">fake_req</span><span class="p">,</span> <span class="n">fake_res</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span>
			<span class="n">dfd_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">part_parallel_dfd</span><span class="p">)</span>
			
		<span class="k">return</span> <span class="n">gatherResults</span><span class="p">(</span><span class="n">dfd_list</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="상세-설명">상세 설명</h2>

<p><code class="language-plaintext highlighter-rouge">handle_spider_output</code> 메서드는 다음과 같이 정의되어 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">handle_spider_output</span><span class="p">(</span>
        <span class="bp">self</span><span class="p">,</span>
        <span class="n">result</span><span class="p">:</span> <span class="n">Union</span><span class="p">[</span><span class="n">Iterable</span><span class="p">,</span> <span class="n">AsyncIterable</span><span class="p">],</span>
        <span class="n">request</span><span class="p">:</span> <span class="n">Request</span><span class="p">,</span>
        <span class="n">response</span><span class="p">:</span> <span class="n">Union</span><span class="p">[</span><span class="n">Response</span><span class="p">,</span> <span class="n">Failure</span><span class="p">],</span>
        <span class="n">spider</span><span class="p">:</span> <span class="n">Spider</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Deferred</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">result</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">defer_succeed</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
        <span class="c1"># errback 이 적용된 result 래핑 객체
</span>        <span class="n">it</span><span class="p">:</span> <span class="n">Union</span><span class="p">[</span><span class="n">Generator</span><span class="p">,</span> <span class="n">AsyncGenerator</span><span class="p">]</span>
        <span class="c1"># spider에서 Request | Item 을 yield 한 메서드가 비동기 메서드인 경우, 비동기 병렬 처리
</span>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">AsyncIterable</span><span class="p">):</span>
            <span class="n">it</span> <span class="o">=</span> <span class="n">aiter_errback</span><span class="p">(</span>
                <span class="n">result</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">handle_spider_error</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">spider</span>
            <span class="p">)</span>
            <span class="n">dfd</span> <span class="o">=</span> <span class="n">parallel_async</span><span class="p">(</span>
                <span class="n">it</span><span class="p">,</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">concurrent_items</span><span class="p">,</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">_process_spidermw_output</span><span class="p">,</span>
                <span class="n">request</span><span class="p">,</span>
                <span class="n">response</span><span class="p">,</span>
                <span class="n">spider</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="c1"># 메서드가 동기 메서드인 경우, 병렬 처리
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="n">it</span> <span class="o">=</span> <span class="n">iter_errback</span><span class="p">(</span>
                <span class="n">result</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">handle_spider_error</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">spider</span>
            <span class="p">)</span>
            <span class="n">dfd</span> <span class="o">=</span> <span class="n">parallel</span><span class="p">(</span>
                <span class="n">it</span><span class="p">,</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">concurrent_items</span><span class="p">,</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">_process_spidermw_output</span><span class="p">,</span>
                <span class="n">request</span><span class="p">,</span>
                <span class="n">response</span><span class="p">,</span>
                <span class="n">spider</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="k">return</span> <span class="n">dfd</span>
</code></pre></div></div>

<p>내부에서 사용하고 있는 <code class="language-plaintext highlighter-rouge">_process_spidermw_output</code> 메서드는 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">_process_spidermw_output</span><span class="p">(</span>
        <span class="bp">self</span><span class="p">,</span> <span class="n">output</span><span class="p">:</span> <span class="n">Any</span><span class="p">,</span> <span class="n">request</span><span class="p">:</span> <span class="n">Request</span><span class="p">,</span> <span class="n">response</span><span class="p">:</span> <span class="n">Response</span><span class="p">,</span> <span class="n">spider</span><span class="p">:</span> <span class="n">Spider</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Deferred</span><span class="p">[</span><span class="n">Any</span><span class="p">]]:</span>
        <span class="s">"""Process each Request/Item (given in the output parameter) returned
        from the given spider
        """</span>
        <span class="k">assert</span> <span class="bp">self</span><span class="p">.</span><span class="n">slot</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span>  <span class="c1"># typing
</span>        <span class="c1"># 요청 객체인 경우 engine 에 요청을 스케줄링한다.
</span>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">Request</span><span class="p">):</span>
            <span class="k">assert</span> <span class="bp">self</span><span class="p">.</span><span class="n">crawler</span><span class="p">.</span><span class="n">engine</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span>  <span class="c1"># typing
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">crawler</span><span class="p">.</span><span class="n">engine</span><span class="p">.</span><span class="n">crawl</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">output</span><span class="p">)</span>
        <span class="c1"># Item 객체인 경우 `itemproc` 에게 처리를 위임한다.
</span>        <span class="k">elif</span> <span class="n">is_item</span><span class="p">(</span><span class="n">output</span><span class="p">):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">slot</span><span class="p">.</span><span class="n">itemproc_size</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">dfd</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">itemproc</span><span class="p">.</span><span class="n">process_item</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span>
            <span class="n">dfd</span><span class="p">.</span><span class="n">addBoth</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_itemproc_finished</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">dfd</span>
        <span class="k">elif</span> <span class="n">output</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">typename</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="n">output</span><span class="p">).</span><span class="n">__name__</span>
            <span class="n">logger</span><span class="p">.</span><span class="n">error</span><span class="p">(</span>
                <span class="s">"Spider must return request, item, or None, got %(typename)r in %(request)s"</span><span class="p">,</span>
                <span class="p">{</span><span class="s">"request"</span><span class="p">:</span> <span class="n">request</span><span class="p">,</span> <span class="s">"typename"</span><span class="p">:</span> <span class="n">typename</span><span class="p">},</span>
                <span class="n">extra</span><span class="o">=</span><span class="p">{</span><span class="s">"spider"</span><span class="p">:</span> <span class="n">spider</span><span class="p">},</span>
            <span class="p">)</span>
        <span class="k">return</span> <span class="bp">None</span>

</code></pre></div></div>

<p>두 메서드를 좀 살펴보면, <code class="language-plaintext highlighter-rouge">itemproc</code> 변수에게 많은 것을 위임하고 있는 것을 알 수 있다. <code class="language-plaintext highlighter-rouge">itemproc</code> 은 <code class="language-plaintext highlighter-rouge">Item Processor</code> 의 약자이다.
이에 대해서 너무 깊이 들여다 볼 필요는 없지만, 적어도 <code class="language-plaintext highlighter-rouge">itemproc</code>이 무슨 역할을 수행하는지 정도는 알아야 한다.</p>

<h3 id="item-processor">Item Processor</h3>

<p>다시 <code class="language-plaintext highlighter-rouge">Scraper</code> 클래스로 돌아가보자. 생성자 메서드를 보면 다음과 같이 정의되어 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Scraper</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">crawler</span><span class="p">:</span> <span class="n">Crawler</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">slot</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Slot</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">spidermw</span><span class="p">:</span> <span class="n">SpiderMiddlewareManager</span> <span class="o">=</span> <span class="n">SpiderMiddlewareManager</span><span class="p">.</span><span class="n">from_crawler</span><span class="p">(</span>
            <span class="n">crawler</span>
        <span class="p">)</span>
        <span class="n">itemproc_cls</span><span class="p">:</span> <span class="n">Type</span><span class="p">[</span><span class="n">ItemPipelineManager</span><span class="p">]</span> <span class="o">=</span> <span class="n">load_object</span><span class="p">(</span>
            <span class="n">crawler</span><span class="p">.</span><span class="n">settings</span><span class="p">[</span><span class="s">"ITEM_PROCESSOR"</span><span class="p">]</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">itemproc</span><span class="p">:</span> <span class="n">ItemPipelineManager</span> <span class="o">=</span> <span class="n">itemproc_cls</span><span class="p">.</span><span class="n">from_crawler</span><span class="p">(</span><span class="n">crawler</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">concurrent_items</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">crawler</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">getint</span><span class="p">(</span><span class="s">"CONCURRENT_ITEMS"</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">crawler</span><span class="p">:</span> <span class="n">Crawler</span> <span class="o">=</span> <span class="n">crawler</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">signals</span><span class="p">:</span> <span class="n">SignalManager</span> <span class="o">=</span> <span class="n">crawler</span><span class="p">.</span><span class="n">signals</span>
        <span class="k">assert</span> <span class="n">crawler</span><span class="p">.</span><span class="n">logformatter</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">logformatter</span><span class="p">:</span> <span class="n">LogFormatter</span> <span class="o">=</span> <span class="n">crawler</span><span class="p">.</span><span class="n">logformatter</span>
</code></pre></div></div>

<p>살펴보면 <code class="language-plaintext highlighter-rouge">itemproc</code> 필드는 다음과 같이 생성됨을 알 수 있다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">Settings</code> 객체로부터 <code class="language-plaintext highlighter-rouge">ITEM_PROCESSOR</code> 설정 값을 추출</li>
  <li>추출한 클래스 객체를 <code class="language-plaintext highlighter-rouge">from_crawler</code> 메서드를 호출하여 인스턴스로 만든 후, 인스턴스 변수에 저장</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">Scrapy</code> 프레임워크의 문서 등을 살펴봐도 <code class="language-plaintext highlighter-rouge">ITEM_PROCESSOR</code> 에 대한 설명은 자세히 나와있지 않다.<br />
이는 내부 구현 클래스이고, 프레임워크의 아키텍처를 뒤집어 엎을 생각이 아닌 이상 그럴 필요가 없기 때문이기도 하다.</p>

<p>실제로 내부적으로 쓰이는 기본 설정 값은 <a href="https://github.com/scrapy/scrapy/blob/master/scrapy/settings/default_settings.py#L205">default_settings.py</a> 파일에서 찾을 수 있는데, 기본값으로 <code class="language-plaintext highlighter-rouge">scrapy.pipelines.ItemPipelineManager</code> 를 사용하고 있다.<br />
이 클래스를 scrapy 내부에서 찾아보면 다음과 같은 클래스가 발견된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""  
Item pipeline  
  
See documentation in docs/item-pipeline.rst  
"""</span>  
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">List</span>  
  
<span class="kn">from</span> <span class="nn">twisted.internet.defer</span> <span class="kn">import</span> <span class="n">Deferred</span>  
  
<span class="kn">from</span> <span class="nn">scrapy</span> <span class="kn">import</span> <span class="n">Spider</span>  
<span class="kn">from</span> <span class="nn">scrapy.middleware</span> <span class="kn">import</span> <span class="n">MiddlewareManager</span>  
<span class="kn">from</span> <span class="nn">scrapy.utils.conf</span> <span class="kn">import</span> <span class="n">build_component_list</span>  
<span class="kn">from</span> <span class="nn">scrapy.utils.defer</span> <span class="kn">import</span> <span class="n">deferred_f_from_coro_f</span>  
  
  
<span class="k">class</span> <span class="nc">ItemPipelineManager</span><span class="p">(</span><span class="n">MiddlewareManager</span><span class="p">):</span>  
    <span class="n">component_name</span> <span class="o">=</span> <span class="s">"item pipeline"</span>  
  
    <span class="o">@</span><span class="nb">classmethod</span>  
    <span class="k">def</span> <span class="nf">_get_mwlist_from_settings</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">settings</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">]:</span>  
        <span class="k">return</span> <span class="n">build_component_list</span><span class="p">(</span><span class="n">settings</span><span class="p">.</span><span class="n">getwithbase</span><span class="p">(</span><span class="s">"ITEM_PIPELINES"</span><span class="p">))</span>  
  
    <span class="k">def</span> <span class="nf">_add_middleware</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pipe</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>  
        <span class="nb">super</span><span class="p">().</span><span class="n">_add_middleware</span><span class="p">(</span><span class="n">pipe</span><span class="p">)</span>  
        <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">pipe</span><span class="p">,</span> <span class="s">"process_item"</span><span class="p">):</span>  
            <span class="bp">self</span><span class="p">.</span><span class="n">methods</span><span class="p">[</span><span class="s">"process_item"</span><span class="p">].</span><span class="n">append</span><span class="p">(</span>  
                <span class="n">deferred_f_from_coro_f</span><span class="p">(</span><span class="n">pipe</span><span class="p">.</span><span class="n">process_item</span><span class="p">)</span>  
            <span class="p">)</span>  
    <span class="k">def</span> <span class="nf">process_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">:</span> <span class="n">Any</span><span class="p">,</span> <span class="n">spider</span><span class="p">:</span> <span class="n">Spider</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Deferred</span><span class="p">:</span>  
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_process_chain</span><span class="p">(</span><span class="s">"process_item"</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ItemPipelineManager</code> 클래스가 상속하고 있는 <code class="language-plaintext highlighter-rouge">MiddlewareManager</code> 클래스의 코드는 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>

<span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">import</span> <span class="nn">pprint</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span><span class="p">,</span> <span class="n">deque</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">TYPE_CHECKING</span><span class="p">,</span>
    <span class="n">Any</span><span class="p">,</span>
    <span class="n">Callable</span><span class="p">,</span>
    <span class="n">Deque</span><span class="p">,</span>
    <span class="n">Dict</span><span class="p">,</span>
    <span class="n">Iterable</span><span class="p">,</span>
    <span class="n">List</span><span class="p">,</span>
    <span class="n">Optional</span><span class="p">,</span>
    <span class="n">Tuple</span><span class="p">,</span>
    <span class="n">Union</span><span class="p">,</span>
    <span class="n">cast</span><span class="p">,</span>
<span class="p">)</span>

<span class="kn">from</span> <span class="nn">twisted.internet.defer</span> <span class="kn">import</span> <span class="n">Deferred</span>

<span class="kn">from</span> <span class="nn">scrapy</span> <span class="kn">import</span> <span class="n">Spider</span>
<span class="kn">from</span> <span class="nn">scrapy.exceptions</span> <span class="kn">import</span> <span class="n">NotConfigured</span>
<span class="kn">from</span> <span class="nn">scrapy.settings</span> <span class="kn">import</span> <span class="n">Settings</span>
<span class="kn">from</span> <span class="nn">scrapy.utils.defer</span> <span class="kn">import</span> <span class="n">process_chain</span><span class="p">,</span> <span class="n">process_parallel</span>
<span class="kn">from</span> <span class="nn">scrapy.utils.misc</span> <span class="kn">import</span> <span class="n">create_instance</span><span class="p">,</span> <span class="n">load_object</span>

<span class="k">if</span> <span class="n">TYPE_CHECKING</span><span class="p">:</span>
    <span class="c1"># typing.Self requires Python 3.11
</span>    <span class="kn">from</span> <span class="nn">typing_extensions</span> <span class="kn">import</span> <span class="n">Self</span>

    <span class="kn">from</span> <span class="nn">scrapy.crawler</span> <span class="kn">import</span> <span class="n">Crawler</span>


<span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">MiddlewareManager</span><span class="p">:</span>
    <span class="s">"""Base class for implementing middleware managers"""</span>

    <span class="n">component_name</span> <span class="o">=</span> <span class="s">"foo middleware"</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">middlewares</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">middlewares</span> <span class="o">=</span> <span class="n">middlewares</span>
        <span class="c1"># Only process_spider_output and process_spider_exception can be None.
</span>        <span class="c1"># Only process_spider_output can be a tuple, and only until _async compatibility methods are removed.
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">methods</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span>
            <span class="nb">str</span><span class="p">,</span> <span class="n">Deque</span><span class="p">[</span><span class="n">Union</span><span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">Callable</span><span class="p">,</span> <span class="n">Callable</span><span class="p">]]]</span>
        <span class="p">]</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="n">deque</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">mw</span> <span class="ow">in</span> <span class="n">middlewares</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">_add_middleware</span><span class="p">(</span><span class="n">mw</span><span class="p">)</span>

    <span class="o">@</span><span class="nb">classmethod</span>
    <span class="k">def</span> <span class="nf">_get_mwlist_from_settings</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">settings</span><span class="p">:</span> <span class="n">Settings</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">]:</span>
        <span class="k">raise</span> <span class="nb">NotImplementedError</span>

    <span class="o">@</span><span class="nb">classmethod</span>
    <span class="k">def</span> <span class="nf">from_settings</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span> <span class="n">settings</span><span class="p">:</span> <span class="n">Settings</span><span class="p">,</span> <span class="n">crawler</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Crawler</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Self</span><span class="p">:</span>
        <span class="n">mwlist</span> <span class="o">=</span> <span class="n">cls</span><span class="p">.</span><span class="n">_get_mwlist_from_settings</span><span class="p">(</span><span class="n">settings</span><span class="p">)</span>
        <span class="n">middlewares</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">enabled</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">clspath</span> <span class="ow">in</span> <span class="n">mwlist</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">mwcls</span> <span class="o">=</span> <span class="n">load_object</span><span class="p">(</span><span class="n">clspath</span><span class="p">)</span>
                <span class="n">mw</span> <span class="o">=</span> <span class="n">create_instance</span><span class="p">(</span><span class="n">mwcls</span><span class="p">,</span> <span class="n">settings</span><span class="p">,</span> <span class="n">crawler</span><span class="p">)</span>
                <span class="n">middlewares</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">mw</span><span class="p">)</span>
                <span class="n">enabled</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">clspath</span><span class="p">)</span>
            <span class="k">except</span> <span class="n">NotConfigured</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">e</span><span class="p">.</span><span class="n">args</span><span class="p">:</span>
                    <span class="n">logger</span><span class="p">.</span><span class="n">warning</span><span class="p">(</span>
                        <span class="s">"Disabled %(clspath)s: %(eargs)s"</span><span class="p">,</span>
                        <span class="p">{</span><span class="s">"clspath"</span><span class="p">:</span> <span class="n">clspath</span><span class="p">,</span> <span class="s">"eargs"</span><span class="p">:</span> <span class="n">e</span><span class="p">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]},</span>
                        <span class="n">extra</span><span class="o">=</span><span class="p">{</span><span class="s">"crawler"</span><span class="p">:</span> <span class="n">crawler</span><span class="p">},</span>
                    <span class="p">)</span>

        <span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span>
            <span class="s">"Enabled %(componentname)ss:</span><span class="se">\n</span><span class="s">%(enabledlist)s"</span><span class="p">,</span>
            <span class="p">{</span>
                <span class="s">"componentname"</span><span class="p">:</span> <span class="n">cls</span><span class="p">.</span><span class="n">component_name</span><span class="p">,</span>
                <span class="s">"enabledlist"</span><span class="p">:</span> <span class="n">pprint</span><span class="p">.</span><span class="n">pformat</span><span class="p">(</span><span class="n">enabled</span><span class="p">),</span>
            <span class="p">},</span>
            <span class="n">extra</span><span class="o">=</span><span class="p">{</span><span class="s">"crawler"</span><span class="p">:</span> <span class="n">crawler</span><span class="p">},</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">cls</span><span class="p">(</span><span class="o">*</span><span class="n">middlewares</span><span class="p">)</span>

    <span class="o">@</span><span class="nb">classmethod</span>
    <span class="k">def</span> <span class="nf">from_crawler</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">crawler</span><span class="p">:</span> <span class="n">Crawler</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Self</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="n">from_settings</span><span class="p">(</span><span class="n">crawler</span><span class="p">.</span><span class="n">settings</span><span class="p">,</span> <span class="n">crawler</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_add_middleware</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mw</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">mw</span><span class="p">,</span> <span class="s">"open_spider"</span><span class="p">):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">methods</span><span class="p">[</span><span class="s">"open_spider"</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">mw</span><span class="p">.</span><span class="n">open_spider</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">mw</span><span class="p">,</span> <span class="s">"close_spider"</span><span class="p">):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">methods</span><span class="p">[</span><span class="s">"close_spider"</span><span class="p">].</span><span class="n">appendleft</span><span class="p">(</span><span class="n">mw</span><span class="p">.</span><span class="n">close_spider</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_process_parallel</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">methodname</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Deferred</span><span class="p">:</span>
        <span class="n">methods</span> <span class="o">=</span> <span class="n">cast</span><span class="p">(</span><span class="n">Iterable</span><span class="p">[</span><span class="n">Callable</span><span class="p">],</span> <span class="bp">self</span><span class="p">.</span><span class="n">methods</span><span class="p">[</span><span class="n">methodname</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">process_parallel</span><span class="p">(</span><span class="n">methods</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_process_chain</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">methodname</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Deferred</span><span class="p">:</span>
        <span class="n">methods</span> <span class="o">=</span> <span class="n">cast</span><span class="p">(</span><span class="n">Iterable</span><span class="p">[</span><span class="n">Callable</span><span class="p">],</span> <span class="bp">self</span><span class="p">.</span><span class="n">methods</span><span class="p">[</span><span class="n">methodname</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">process_chain</span><span class="p">(</span><span class="n">methods</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">open_spider</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">spider</span><span class="p">:</span> <span class="n">Spider</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Deferred</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_process_parallel</span><span class="p">(</span><span class="s">"open_spider"</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">close_spider</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">spider</span><span class="p">:</span> <span class="n">Spider</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Deferred</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_process_parallel</span><span class="p">(</span><span class="s">"close_spider"</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span>

</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">MiddlewareManager</code> 클래스의 상속 구조를 도식화 해보면 다음과 같다.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5kaXJlY3Rpb24gVEJcbmNsYXNzIE1pZGRsZXdhcmVNYW5hZ2VyXG5jbGFzcyBEb3dubG9hZGVyTWlkZGxld2FyZU1hbmFnZXJcbmNsYXNzIFNwaWRlck1pZGRsZXdhcmVNYW5hZ2VyXG5jbGFzcyBJdGVtUGlwZWxpbmVNYW5hZ2VyXG5jbGFzcyBFeHRlbnNpb25NYW5hZ2VyXG4lJS1cbk1pZGRsZXdhcmVNYW5hZ2VyIDx8LS0gRG93bmxvYWRlck1pZGRsZXdhcmVNYW5hZ2VyXG5NaWRkbGV3YXJlTWFuYWdlciA8fC0tIFNwaWRlck1pZGRsZXdhcmVNYW5hZ2VyXG5NaWRkbGV3YXJlTWFuYWdlciA8fC0tIEl0ZW1QaXBlbGluZU1hbmFnZXJcbk1pZGRsZXdhcmVNYW5hZ2VyIDx8LS0gRXh0ZW5zaW9uTWFuYWdlclxuJSUtIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0" /></p>

<p>내부 구현 로직을 자세하게 분석할 필요는 없지만, 클래스들의 코드 동작을 살펴보면 다음과 같은 기능을 하고 있음을 알 수 있다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MiddlewareManager</code>
    <ul>
      <li>미들웨어 기능을 해야 하는 컴포넌트의 뼈대 클래스</li>
      <li><code class="language-plaintext highlighter-rouge">Settings</code> 객체로부터 자신에게 필요한 미들웨어들을 추출하여 생성하고, 이를 <code class="language-plaintext highlighter-rouge">Twisted</code> 프레임워크를 사용하여 병렬/연쇄적으로 처리하는 기능을 갖추고 있음</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">ItemPipelineManager</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">MiddlewareManager</code> 를 상속</li>
      <li>Item Pipeline 관련된 기능을 처리하는 역할을 수행</li>
    </ul>
  </li>
</ul>

<h3 id="왜-이렇게-복잡하게-처리가-필요한가">왜 이렇게 복잡하게 처리가 필요한가</h3>

<p>Scrapy 프레임워크를 사용하면서 Item 을 <code class="language-plaintext highlighter-rouge">Yield</code> 하면, 프레임워크가 처리해주는 작업은 여러가지가 있다.</p>

<ol>
  <li>Item 을 Item Pipeline으로 필터링하는 역할</li>
  <li>시그널 (이벤트) 처리</li>
  <li>로깅 처리</li>
</ol>

<p>이와 관련된 기능은 대부분 Scrapy Engine 과 그 내부에 있는 컴포넌트 (특히, <code class="language-plaintext highlighter-rouge">Scraper</code>) 들을 거쳐 결정된다.<br />
**따라서, 기존 Scrapy 의 파이프라인 기능을 그대로 사용하려면 Engine 내부에 있는 컴포넌트들을 사용해야 문제 없이 처리가 가능하다.
**</p>

<p>또한, 이 외에도 Item Pipeline 을 통과한 아이템들은 <code class="language-plaintext highlighter-rouge">ItemExporter</code> 를 거쳐 <code class="language-plaintext highlighter-rouge">FeedSlot</code> 객체에 모이게 되는데, <a href="https://docs.scrapy.org/en/latest/topics/signals.html#scrapy.signals.feed_slot_closed">feed_slot_closed</a> , 와 같은 시그널을 처리하는 시그널 핸들러를 사용하면 수집이 종료된 시점에 최종적인 수집 데이터를 사용하여 API나 이벤트 큐와 통신하는 것들이 매우 용이해진다.
이런 기능을 그대로 사용하려면, 마찬가지로 수집된 Item 들을 Item Pipeline 을 통하도록 하는 것이 가장 간단하다.
이를 쉽게 가능하도록 하는 방법은 <code class="language-plaintext highlighter-rouge">Scraper</code> 를 사용하는 것이 현재까지는 가장 적절해 보인다.</p>

<h3 id="사용-예시">사용 예시</h3>

<p>다음과 같은 목표를 가지고 Spider와 Pipeline을 작성해야 한다고 가정해보자.</p>

<ol>
  <li>특정한 데이터를 수집 시 DB 테이블에 Insert 한다.</li>
  <li>수집 과정에서 DB에 있는 데이터를 Update 처리한다.</li>
  <li>수집이 끝난 시점에서 모든 데이터를 DB에서 모두 읽어 Yield 한다.</li>
</ol>

<p>위의 요구사항을 충족만 하는 최소한의 예시 프로그램을 만들어 본다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">InsertItem</code> 을 수집 시 DB 테이블에 Insert 처리한다.</li>
  <li><code class="language-plaintext highlighter-rouge">OverwriteItem</code> 을 수집 시 데이터를 Update 처리한다.</li>
  <li>수집기는 최종적으로, <code class="language-plaintext highlighter-rouge">FinalItem</code> 만을 수집해야 한다.</li>
</ol>

<p>간단하게 작성해 본 코드는 다음과 같다. (<code class="language-plaintext highlighter-rouge">SQLAlchemy</code>, <code class="language-plaintext highlighter-rouge">Scrapy</code> 기반)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections.abc</span> <span class="kn">import</span> <span class="n">Iterable</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Any</span>

<span class="kn">from</span> <span class="nn">scrapy</span> <span class="kn">import</span> <span class="n">Spider</span>
<span class="kn">from</span> <span class="nn">scrapy.exceptions</span> <span class="kn">import</span> <span class="n">DropItem</span>
<span class="kn">from</span> <span class="nn">scrapy.http</span> <span class="kn">import</span> <span class="n">TextResponse</span>
<span class="kn">from</span> <span class="nn">scrapy.http.request</span> <span class="kn">import</span> <span class="n">Request</span>
<span class="kn">from</span> <span class="nn">scrapy.item</span> <span class="kn">import</span> <span class="n">Field</span><span class="p">,</span> <span class="n">Item</span>
<span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">Engine</span><span class="p">,</span> <span class="n">create_engine</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">DeclarativeBase</span><span class="p">,</span> <span class="n">Mapped</span><span class="p">,</span> <span class="n">mapped_column</span><span class="p">,</span> <span class="n">sessionmaker</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.sql.expression</span> <span class="kn">import</span> <span class="n">insert</span><span class="p">,</span> <span class="n">select</span><span class="p">,</span> <span class="n">update</span>
<span class="kn">from</span> <span class="nn">twisted.internet.defer</span> <span class="kn">import</span> <span class="n">gatherResults</span>


<span class="k">class</span> <span class="nc">BaseItem</span><span class="p">(</span><span class="n">Item</span><span class="p">):</span>
    <span class="n">number</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
    <span class="n">status</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>


<span class="k">class</span> <span class="nc">InsertItem</span><span class="p">(</span><span class="n">BaseItem</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="k">class</span> <span class="nc">OverwriteItem</span><span class="p">(</span><span class="n">BaseItem</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="k">class</span> <span class="nc">FinalItem</span><span class="p">(</span><span class="n">BaseItem</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="n">MAX_ITEMS</span> <span class="o">=</span> <span class="mi">20</span>  
<span class="n">BATCH_SIZE</span> <span class="o">=</span> <span class="mi">10</span>


<span class="k">class</span> <span class="nc">SchemeBase</span><span class="p">(</span><span class="n">DeclarativeBase</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="k">class</span> <span class="nc">TestScheme</span><span class="p">(</span><span class="n">SchemeBase</span><span class="p">):</span>
    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s">"test"</span>

    <span class="n">number</span><span class="p">:</span> <span class="n">Mapped</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="n">mapped_column</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">status</span><span class="p">:</span> <span class="n">Mapped</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="n">mapped_column</span><span class="p">(</span><span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">TestPipeline</span><span class="p">:</span>
    <span class="n">engine</span><span class="p">:</span> <span class="n">Engine</span>
    <span class="n">session_maker</span><span class="p">:</span> <span class="n">sessionmaker</span>

    <span class="k">def</span> <span class="nf">open_spider</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
        <span class="s">"""Initialize the database engine and session maker"""</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">engine</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="s">"sqlite:///test.db"</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">session_maker</span> <span class="o">=</span> <span class="n">sessionmaker</span><span class="p">(</span><span class="n">bind</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">engine</span><span class="p">)</span>

        <span class="n">SchemeBase</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="n">create_all</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">engine</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">process_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
        <span class="s">"""Insert or update the item in the database"""</span>

        <span class="k">with</span> <span class="bp">self</span><span class="p">.</span><span class="n">session_maker</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">InsertItem</span><span class="p">):</span>
                <span class="n">session</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span>
                    <span class="n">insert</span><span class="p">(</span><span class="n">TestScheme</span><span class="p">).</span><span class="n">values</span><span class="p">(</span>
                        <span class="n">number</span><span class="o">=</span><span class="n">item</span><span class="p">[</span><span class="s">"number"</span><span class="p">],</span>
                        <span class="n">status</span><span class="o">=</span><span class="n">item</span><span class="p">[</span><span class="s">"status"</span><span class="p">],</span>
                    <span class="p">),</span>
                <span class="p">)</span>
                <span class="n">session</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>
                <span class="k">raise</span> <span class="n">DropItem</span><span class="p">(</span><span class="sa">f</span><span class="s">"Inserted item </span><span class="si">{</span><span class="n">item</span><span class="p">[</span><span class="s">'number'</span><span class="p">]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">OverwriteItem</span><span class="p">):</span>
                <span class="n">session</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span>
                    <span class="n">update</span><span class="p">(</span><span class="n">TestScheme</span><span class="p">)</span>
                    <span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="n">TestScheme</span><span class="p">.</span><span class="n">number</span> <span class="o">==</span> <span class="n">item</span><span class="p">[</span><span class="s">"number"</span><span class="p">])</span>
                    <span class="p">.</span><span class="n">values</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="n">item</span><span class="p">[</span><span class="s">"status"</span><span class="p">]),</span>
                <span class="p">)</span>
                <span class="n">session</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>
                <span class="k">raise</span> <span class="n">DropItem</span><span class="p">(</span><span class="sa">f</span><span class="s">"Overwritten item </span><span class="si">{</span><span class="n">item</span><span class="p">[</span><span class="s">'number'</span><span class="p">]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">item</span>

    <span class="k">def</span> <span class="nf">close_spider</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
        <span class="s">"""
        Read all items from the database and convert them to FinalItem,
        then pass them to pipeline for further processing
        """</span>

        <span class="n">dfd_list</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">MAX_ITEMS</span><span class="p">,</span> <span class="n">BATCH_SIZE</span><span class="p">):</span>
            <span class="k">with</span> <span class="bp">self</span><span class="p">.</span><span class="n">session_maker</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
                <span class="n">items</span> <span class="o">=</span> <span class="p">(</span>
                    <span class="n">session</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span>
                        <span class="n">select</span><span class="p">(</span><span class="n">TestScheme</span><span class="p">)</span>
                        <span class="p">.</span><span class="n">order_by</span><span class="p">(</span><span class="n">TestScheme</span><span class="p">.</span><span class="n">number</span><span class="p">)</span>
                        <span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                        <span class="p">.</span><span class="n">limit</span><span class="p">(</span><span class="n">BATCH_SIZE</span><span class="p">),</span>
                    <span class="p">)</span>
                    <span class="p">.</span><span class="n">scalars</span><span class="p">()</span>
                    <span class="p">.</span><span class="nb">all</span><span class="p">()</span>
                <span class="p">)</span>

            <span class="n">conv_items</span> <span class="o">=</span> <span class="p">[</span>
                <span class="n">FinalItem</span><span class="p">(</span>
                    <span class="n">number</span><span class="o">=</span><span class="n">item</span><span class="p">.</span><span class="n">number</span><span class="p">,</span>
                    <span class="n">status</span><span class="o">=</span><span class="s">"final"</span><span class="p">,</span>
                <span class="p">)</span>
                <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span>
            <span class="p">]</span>
            <span class="n">cb_dfd</span> <span class="o">=</span> <span class="n">spider</span><span class="p">.</span><span class="n">crawler</span><span class="p">.</span><span class="n">engine</span><span class="p">.</span><span class="n">scraper</span><span class="p">.</span><span class="n">handle_spider_output</span><span class="p">(</span>
                <span class="n">conv_items</span><span class="p">,</span>
                <span class="bp">None</span><span class="p">,</span>
                <span class="bp">None</span><span class="p">,</span>
                <span class="n">spider</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">dfd_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cb_dfd</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">gatherResults</span><span class="p">(</span><span class="n">dfd_list</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">TestSpider</span><span class="p">(</span><span class="n">Spider</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">"test_spider"</span>
    <span class="n">start_urls</span> <span class="o">=</span> <span class="p">[</span><span class="s">"http://example.com"</span><span class="p">]</span>

    <span class="n">custom_settings</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">"ITEM_PIPELINES"</span><span class="p">:</span> <span class="p">{</span>
            <span class="n">TestPipeline</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="s">"FEEDS"</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">"test.jl"</span><span class="p">:</span> <span class="p">{</span>
                <span class="s">"format"</span><span class="p">:</span> <span class="s">"jsonlines"</span><span class="p">,</span>
                <span class="s">"overwrite"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
        <span class="s">"DOWNLOAD_DELAY"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>  <span class="c1"># prevent ddos
</span>    <span class="p">}</span>

    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span>
        <span class="bp">self</span><span class="p">,</span>
        <span class="n">response</span><span class="p">:</span> <span class="n">TextResponse</span><span class="p">,</span>
        <span class="o">**</span><span class="n">kwargs</span><span class="p">:</span> <span class="n">Any</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Iterable</span><span class="p">[</span><span class="n">Item</span> <span class="o">|</span> <span class="n">Request</span><span class="p">]:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">MAX_ITEMS</span><span class="p">,</span> <span class="n">BATCH_SIZE</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">BATCH_SIZE</span><span class="p">):</span>
                <span class="k">yield</span> <span class="n">InsertItem</span><span class="p">(</span><span class="o">**</span><span class="p">{</span><span class="s">"number"</span><span class="p">:</span> <span class="n">j</span><span class="p">,</span> <span class="s">"status"</span><span class="p">:</span> <span class="s">"insert"</span><span class="p">})</span>

            <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span>
                <span class="n">url</span><span class="o">=</span><span class="s">"http://example.com"</span><span class="p">,</span>
                <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">overwrite</span><span class="p">,</span>
                <span class="n">cb_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s">"number"</span><span class="p">:</span> <span class="n">i</span><span class="p">},</span>
                <span class="n">dont_filter</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="p">)</span>

    <span class="k">def</span> <span class="nf">overwrite</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">:</span> <span class="n">TextResponse</span><span class="p">,</span> <span class="n">number</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Iterable</span><span class="p">[</span><span class="n">Item</span><span class="p">]:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">number</span> <span class="o">+</span> <span class="n">BATCH_SIZE</span><span class="p">):</span>
            <span class="k">yield</span> <span class="n">OverwriteItem</span><span class="p">(</span><span class="o">**</span><span class="p">{</span><span class="s">"number"</span><span class="p">:</span> <span class="n">i</span><span class="p">,</span> <span class="s">"status"</span><span class="p">:</span> <span class="s">"overwrite"</span><span class="p">})</span>

</code></pre></div></div>

<p>각 컴포넌트 별로 수행하는 기능은 다음과 같다.</p>

<ul>
  <li>Spider (<code class="language-plaintext highlighter-rouge">TestSpider</code>)
    <ul>
      <li>Request 또는 Item 을 Yield 하는 역할만 수행</li>
    </ul>
  </li>
  <li>Item Pipeline (<code class="language-plaintext highlighter-rouge">TestPipeline</code>)
    <ul>
      <li>DB (<code class="language-plaintext highlighter-rouge">SQLAlchemy</code> 기반의 <code class="language-plaintext highlighter-rouge">SQLite</code> 엔진, 세션) 관리</li>
      <li>Item 유형에 따라 분기 처리
        <ul>
          <li><code class="language-plaintext highlighter-rouge">InsertItem</code> 인 경우 Insert 후 Item Drop</li>
          <li><code class="language-plaintext highlighter-rouge">OverwriteItem</code> 인 경우 Update 후 Item Drop</li>
          <li>그 외의 경우 item return</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">close_spider</code> 호출 시 DB 에 저장한 데이터를 모두 파이프라인으로 전송</li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">runspider</code> 등의 명령어로 실행 시 다음과 같이 로그가 남는다.</p>

<pre><code class="language-log">2024-06-13 02:37:55 [scrapy.utils.log] INFO: Scrapy 2.11.2 started (bot: scrapybot)
2024-06-13 02:37:55 [scrapy.utils.log] INFO: Versions: lxml 5.2.2.0, libxml2 2.12.6, cssselect 1.2.0, parsel 1.9.1, w3lib 2.2.0, Twisted 24.3.0, Python 3.11.9 (main, Apr 15 2024, 18:24:23) [Clang 17.0.6 ], pyOpenSSL 24.1.0 (OpenSSL 3.2.2 4 Jun 2024), cryptography 42.0.8, Platform Linux-5.15.0-102-generic-x86_64-with-glibc2.35
2024-06-13 02:37:55 [scrapy.addons] INFO: Enabled addons:
[]
2024-06-13 02:37:55 [scrapy.utils.log] DEBUG: Using reactor: twisted.internet.epollreactor.EPollReactor
2024-06-13 02:37:55 [scrapy.extensions.telnet] INFO: Telnet Password: c1ff0f3b318422a0
2024-06-13 02:37:55 [scrapy.middleware] INFO: Enabled extensions:
['scrapy.extensions.corestats.CoreStats',
 'scrapy.extensions.telnet.TelnetConsole',
 'scrapy.extensions.memusage.MemoryUsage',
 'scrapy.extensions.feedexport.FeedExporter',
 'scrapy.extensions.logstats.LogStats']
2024-06-13 02:37:55 [scrapy.crawler] INFO: Overridden settings:
{'DOWNLOAD_DELAY': 2,
 'REQUEST_FINGERPRINTER_IMPLEMENTATION': '2.7',
 'SPIDER_LOADER_WARN_ONLY': True}
2024-06-13 02:37:55 [scrapy.middleware] INFO: Enabled downloader middlewares:
['scrapy.downloadermiddlewares.offsite.OffsiteMiddleware',
 'scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware',
 'scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware',
 'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware',
 'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware',
 'scrapy.downloadermiddlewares.retry.RetryMiddleware',
 'scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware',
 'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware',
 'scrapy.downloadermiddlewares.redirect.RedirectMiddleware',
 'scrapy.downloadermiddlewares.cookies.CookiesMiddleware',
 'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware',
 'scrapy.downloadermiddlewares.stats.DownloaderStats']
2024-06-13 02:37:55 [scrapy.middleware] INFO: Enabled spider middlewares:
['scrapy.spidermiddlewares.httperror.HttpErrorMiddleware',
 'scrapy.spidermiddlewares.referer.RefererMiddleware',
 'scrapy.spidermiddlewares.urllength.UrlLengthMiddleware',
 'scrapy.spidermiddlewares.depth.DepthMiddleware']
2024-06-13 02:37:55 [scrapy.middleware] INFO: Enabled item pipelines:
[&lt;class 'test_spider.TestPipeline'&gt;]
2024-06-13 02:37:55 [scrapy.core.engine] INFO: Spider opened
2024-06-13 02:37:55 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)
2024-06-13 02:37:55 [scrapy.extensions.telnet] INFO: Telnet console listening on 127.0.0.1:6023
2024-06-13 02:37:56 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://example.com&gt; (referer: None)
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 0
{'number': 0, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 1
{'number': 1, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 2
{'number': 2, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 3
{'number': 3, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 4
{'number': 4, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 5
{'number': 5, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 6
{'number': 6, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 7
{'number': 7, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 8
{'number': 8, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 9
{'number': 9, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 10
{'number': 10, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 11
{'number': 11, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 12
{'number': 12, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 13
{'number': 13, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 14
{'number': 14, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 15
{'number': 15, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 16
{'number': 16, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 17
{'number': 17, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 18
{'number': 18, 'status': 'insert'}
2024-06-13 02:37:56 [scrapy.core.scraper] WARNING: Dropped: Inserted item 19
{'number': 19, 'status': 'insert'}
2024-06-13 02:37:57 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://example.com&gt; (referer: http://example.com)
2024-06-13 02:37:57 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 0
{'number': 0, 'status': 'overwrite'}
2024-06-13 02:37:57 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 1
{'number': 1, 'status': 'overwrite'}
2024-06-13 02:37:57 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 2
{'number': 2, 'status': 'overwrite'}
2024-06-13 02:37:57 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 3
{'number': 3, 'status': 'overwrite'}
2024-06-13 02:37:57 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 4
{'number': 4, 'status': 'overwrite'}
2024-06-13 02:37:57 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 5
{'number': 5, 'status': 'overwrite'}
2024-06-13 02:37:57 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 6
{'number': 6, 'status': 'overwrite'}
2024-06-13 02:37:57 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 7
{'number': 7, 'status': 'overwrite'}
2024-06-13 02:37:57 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 8
{'number': 8, 'status': 'overwrite'}
2024-06-13 02:37:57 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 9
{'number': 9, 'status': 'overwrite'}
2024-06-13 02:37:58 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://example.com&gt; (referer: http://example.com)
2024-06-13 02:37:59 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 10
{'number': 10, 'status': 'overwrite'}
2024-06-13 02:37:59 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 11
{'number': 11, 'status': 'overwrite'}
2024-06-13 02:37:59 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 12
{'number': 12, 'status': 'overwrite'}
2024-06-13 02:37:59 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 13
{'number': 13, 'status': 'overwrite'}
2024-06-13 02:37:59 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 14
{'number': 14, 'status': 'overwrite'}
2024-06-13 02:37:59 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 15
{'number': 15, 'status': 'overwrite'}
2024-06-13 02:37:59 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 16
{'number': 16, 'status': 'overwrite'}
2024-06-13 02:37:59 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 17
{'number': 17, 'status': 'overwrite'}
2024-06-13 02:37:59 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 18
{'number': 18, 'status': 'overwrite'}
2024-06-13 02:37:59 [scrapy.core.scraper] WARNING: Dropped: Overwritten item 19
{'number': 19, 'status': 'overwrite'}
2024-06-13 02:37:59 [scrapy.core.engine] INFO: Closing spider (finished)
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 0, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 1, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 2, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 3, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 4, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 5, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 6, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 7, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 8, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 9, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 10, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 11, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 12, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 13, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 14, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 15, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 16, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 17, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 18, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.core.scraper] DEBUG: Scraped from None
{'number': 19, 'status': 'final'}
2024-06-13 02:37:59 [scrapy.extensions.feedexport] INFO: Stored jsonlines feed (20 items) in: test.jl
2024-06-13 02:37:59 [scrapy.statscollectors] INFO: Dumping Scrapy stats:
{'downloader/request_bytes': 694,
 'downloader/request_count': 3,
 'downloader/request_method_count/GET': 3,
 'downloader/response_bytes': 3021,
 'downloader/response_count': 3,
 'downloader/response_status_count/200': 3,
 'elapsed_time_seconds': 3.365235,
 'feedexport/success_count/FileFeedStorage': 1,
 'finish_reason': 'finished',
 'finish_time': datetime.datetime(2024, 6, 12, 17, 37, 59, 91639, tzinfo=datetime.timezone.utc),
 'httpcompression/response_bytes': 3768,
 'httpcompression/response_count': 3,
 'item_dropped_count': 40,
 'item_dropped_reasons_count/DropItem': 40,
 'item_scraped_count': 20,
 'log_count/DEBUG': 24,
 'log_count/INFO': 11,
 'log_count/WARNING': 40,
 'memusage/max': 8797593600,
 'memusage/startup': 8797593600,
 'request_depth_max': 1,
 'response_received_count': 3,
 'scheduler/dequeued': 3,
 'scheduler/dequeued/memory': 3,
 'scheduler/enqueued': 3,
 'scheduler/enqueued/memory': 3,
 'start_time': datetime.datetime(2024, 6, 12, 17, 37, 55, 726404, tzinfo=datetime.timezone.utc)}
2024-06-13 02:37:59 [scrapy.core.engine] INFO: Spider closed (finished)

</code></pre>

<p>수집된 <code class="language-plaintext highlighter-rouge">jsonlines</code> 파일의 결과를 살펴보면 다음과 같다.</p>

<pre><code class="language-jsonlines">{"number": 0, "status": "final"}  
{"number": 1, "status": "final"}  
{"number": 2, "status": "final"}  
{"number": 3, "status": "final"}  
{"number": 4, "status": "final"}  
{"number": 5, "status": "final"}  
{"number": 6, "status": "final"}  
{"number": 7, "status": "final"}  
{"number": 8, "status": "final"}  
{"number": 9, "status": "final"}  
{"number": 10, "status": "final"}  
{"number": 11, "status": "final"}  
{"number": 12, "status": "final"}  
{"number": 13, "status": "final"}  
{"number": 14, "status": "final"}  
{"number": 15, "status": "final"}  
{"number": 16, "status": "final"}  
{"number": 17, "status": "final"}  
{"number": 18, "status": "final"}  
{"number": 19, "status": "final"}
</code></pre>

<p>우리가 원하던 최종 상태의 Item 만을 수집하는 것을 볼 수 있다.</p>

<h2 id="결론">결론</h2>

<ul>
  <li>Scrapy 에서 수집 종료 시점(<code class="language-plaintext highlighter-rouge">spider_closed</code> 시그널이 트리거 된 후) 에는 Item 을 <code class="language-plaintext highlighter-rouge">Yield</code> 할 수 없다.
    <ul>
      <li>수집 종료 시점에 이를 처리하고자 한다면, <code class="language-plaintext highlighter-rouge">Engine</code> 내부에 숨겨져 있는 <code class="language-plaintext highlighter-rouge">Scraper</code> 클래스를 통해 이를 처리할 수 있다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">Spider</code> 를 기반으로 이를 하고자 한다면 <code class="language-plaintext highlighter-rouge">spider.crawler.engine.scraper.handle_spider_output</code> 을 Item 목록에 적용하고, 적용된 <code class="language-plaintext highlighter-rouge">Deferred</code> 객체를 반환하면 된다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Scraper</code> 클래스가 Item Pipeline 과 관련된 전반적인 생애 주기를 담당한다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Scraper</code> 클래스는 <code class="language-plaintext highlighter-rouge">ItemPipelineManager</code> 클래스를 사용하여 아이템 파이프라인과 Spider 에서 <code class="language-plaintext highlighter-rouge">Yield</code> 처리 된 Item 의 핸들링까지 모두 처리한다.</li>
    </ul>
  </li>
  <li>기존 컴포넌트, 시그널 핸들러, <code class="language-plaintext highlighter-rouge">Feed Exports</code> 와 관련된 기능을 사용하면서 Item 처리를 하려는 경우 Item Pipeline 을 거쳐야 하며, 이 또한 <code class="language-plaintext highlighter-rouge">Scraper</code> 클래스를 사용하여 처리할 수 있다.</li>
</ul>]]></content><author><name>cda2</name></author><category term="Scrapy" /><summary type="html"><![CDATA[개요]]></summary></entry><entry><title type="html">만났던 개발 레퍼런스</title><link href="https://cda2.github.io/history/reference/2024/04/22/%EB%A7%8C%EB%82%AC%EB%8D%98-%EA%B0%9C%EB%B0%9C-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4.html" rel="alternate" type="text/html" title="만났던 개발 레퍼런스" /><published>2024-04-22T18:53:00+00:00</published><updated>2024-04-22T18:53:00+00:00</updated><id>https://cda2.github.io/history/reference/2024/04/22/%EB%A7%8C%EB%82%AC%EB%8D%98%20%EA%B0%9C%EB%B0%9C%20%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4</id><content type="html" xml:base="https://cda2.github.io/history/reference/2024/04/22/%EB%A7%8C%EB%82%AC%EB%8D%98-%EA%B0%9C%EB%B0%9C-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4.html"><![CDATA[<h2 id="디자인">디자인</h2>

<h3 id="패턴">패턴</h3>

<ul>
  <li><a href="https://martinfowler.com/eaaCatalog/dataMapper.html">P of EAA: Data Mapper</a></li>
  <li><a href="https://martinfowler.com/eaaCatalog/queryObject.html">P of EAA: Query Object</a></li>
  <li><a href="https://martinfowler.com/eaaCatalog/domainModel.html">P of EAA: Domain Model</a></li>
  <li><a href="https://martinfowler.com/eaaCatalog/transactionScript.html">P of EAA: Transaction Script</a></li>
  <li><a href="https://martinfowler.com/eaaDev/EventSourcing.html">Event Sourcing</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Snapshot_isolation">Snapshot Isolation</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Double-checked_locking">Double-checked Locking</a></li>
  <li><a href="https://docs.microsoft.com/ko-kr/azure/architecture/patterns/cqrs">CQRS 패턴 - Azure Architecture Center | Microsoft Docs</a></li>
  <li><a href="https://stackoverflow.com/questions/23207323/does-repository-pattern-kills-orm">domain driven design - Does Repository pattern kills ORM? - Stack Overflow</a></li>
</ul>

<h3 id="oop">OOP</h3>

<ul>
  <li><a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/">DDD, Hexagonal, Onion, Clean, CQRS, … How I put it all together</a></li>
  <li><a href="https://www.youtube.com/watch?v=dJ5C4qRqAgA&amp;t=4781s">우아한테크세미나 - 190620 우아한객체지향 by 우아한형제들 개발실장 조영호님 - YouTube</a></li>
  <li><a href="https://www.youtube.com/watch?v=cflK7FTGPlg">우아한테크세미나 - 200507 우아한CRUD by 정상혁&amp;이명현님 - YouTube</a></li>
  <li><a href="https://jojoldu.tistory.com/721">좋은 함수 만들기 - Null 을 다루는 방법</a></li>
</ul>

<h3 id="백엔드-테크닉">백엔드 테크닉</h3>

<ul>
  <li><a href="https://www.slideshare.net/charsyam2/webservice-scaling-for-newbie">https://www.slideshare.net/charsyam2/webservice-scaling-for-newbie</a></li>
  <li><a href="https://techblog.woowahan.com/2631/">MySQL을 이용한 분산락으로 여러 서버에 걸친 동시성 관리 | 우아한형제들 기술블로그</a></li>
  <li><a href="https://www.youtube.com/watch?v=WCwPSVu8mH8">대규모 트랜잭션을 처리하는 배민 주문시스템 규모에 따른 진화</a></li>
  <li><a href="https://techblog.woowahan.com/7835/">회원시스템 이벤트기반 아키텍처 구축하기</a></li>
  <li><a href="https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf">Scaling Memcache at Facebook</a>
    <ul>
      <li><a href="https://nymets.medium.com/%EB%B2%88%EC%97%AD-scaling-memcache-at-facebook-9c67f9e61282">번역 scaling memcache at facebook</a></li>
      <li><a href="https://changhoi.kim/posts/database/scaling-memcache-at-facebook/">정리 블로그</a></li>
    </ul>
  </li>
  <li><a href="https://event-driven.io/en/the_end_is_near_for_crud_data/">Hitchhiker’s Guide To Moving From Relational Data To Events</a></li>
</ul>

<h3 id="가독성">가독성</h3>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two">The Magical Number Seven, Plus or Minus Two</a></li>
</ul>

<h3 id="아키텍처">아키텍처</h3>

<ul>
  <li><a href="https://jack-vanlightly.com/blog/2023/11/14/the-architecture-of-serverless-data-systems">The Architecture Of Serverless Data Systems</a>
    <ul>
      <li><a href="https://news.hada.io/topic?id=12053">서버리스 데이터 시스템의 아키텍처 - GeekNews</a></li>
    </ul>
  </li>
  <li><a href="https://engineering.linecorp.com/ko/blog/port-and-adapter-architecture">지속 가능한 소프트웨어 설계 패턴: 포트와 어댑터 아키텍처 적용하기</a></li>
</ul>

<h2 id="db-sql">DB, SQL</h2>

<ul>
  <li><a href="https://sqlfordevs.com/">sql for devs</a>
    <ul>
      <li><a href="https://sqlfordevs.com/concurrent-updates-locking">Prevent Locking Issues For Updates On Counters</a></li>
      <li><a href="https://sqlfordevs.com/sorted-table-faster-range-scan">Sorted Tables for Faster Range-Scans</a></li>
    </ul>
  </li>
  <li><a href="https://learnsql.com/blog/sql-window-functions-cheat-sheet/">SQL Window Functions Cheat Sheet | LearnSQL.com</a></li>
  <li><a href="https://buttondown.email/jaffray/archive/sql-scoping-is-surprisingly-subtle-and-semantic/">SQL Scoping is Surprisingly Subtle and Semantic</a></li>
  <li><a href="https://medium.com/daangn/varchar-vs-text-230a718a22a1">VARCHAR vs TEXT</a></li>
</ul>

<h2 id="web">WEB</h2>

<h3 id="rfc">RFC</h3>

<ul>
  <li><a href="https://www.rfc-editor.org/rfc/rfc9457">RFC 9457 - Problem Details for HTTP APIs</a></li>
</ul>

<h2 id="jvm">JVM</h2>

<h3 id="java">Java</h3>

<ul>
  <li><a href="https://techblog.woowahan.com/2550/">자바 직렬화, 그것이 알고싶다. 훑어보기편 | 우아한형제들 기술블로그</a></li>
  <li><a href="https://d2.naver.com/helloworld/831311">Java HashMap은 어떻게 동작하는가?</a></li>
</ul>

<h3 id="spring">Spring</h3>

<ul>
  <li><a href="https://github.com/benelog/spring-jdbc-tips">GitHub - benelog/spring-jdbc-tips: Spring JDBC 활용팁, SQL 관리 방안 등</a></li>
  <li><a href="https://github.com/Jpub/SpringInAction5">Jpub/SpringInAction5:&lt;스프링 인 액션&gt;(제5판) 리포지터리</a></li>
  <li><a href="https://techblog.woowahan.com/9232/">Security 🍀 Actuator 안전하게 사용하기 | 우아한형제들 기술블로그</a></li>
  <li><a href="https://techblog.woowahan.com/5825/">스프링에서 코틀린 스타일 테스트 코드 작성하기 | 우아한형제들 기술블로그</a></li>
  <li><a href="https://stackoverflow.com/questions/17346679/transactional-on-postconstruct-method">spring - @Transactional on @PostConstruct method - Stack Overflow</a></li>
  <li><a href="https://tecoble.techcourse.co.kr/post/2022-10-04-active_profiles/">Spring Profile: yml 파일 하나로 프로퍼티 관리하기</a></li>
  <li><a href="https://docs.spring.io/spring-data/relational/reference/index.html">Spring Data Relational Docs</a></li>
  <li><a href="https://techblog.woowahan.com/2664/">HikariCP Dead lock에서 벗어나기 (이론편) | 우아한형제들 기술블로그</a></li>
  <li><a href="https://techblog.woowahan.com/2663/">HikariCP Dead lock에서 벗어나기 (실전편) | 우아한형제들 기술블로그</a></li>
  <li><a href="https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing">https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing</a></li>
  <li><a href="https://techblog.woowahan.com/7349/">배민광고리스팅 개발기 (feat. 코프링과 DSL 그리고 코루틴) | 우아한형제들 기술블로그</a></li>
  <li><a href="https://meetup.nhncloud.com/posts/223">Validation 어디까지 해봤니?</a></li>
  <li><a href="https://blog.outsider.ne.kr/882">Spring 레퍼런스 - 13장 JDBC를 사용한 데이터 접근</a></li>
  <li><a href="https://docs.spring.io/spring-data/rest/reference/paging-and-sorting.html">Paging and Sorting</a></li>
  <li><a href="https://stackoverflow.com/questions/56470555/how-to-configure-and-use-keyexpirationeventmessagelistener-with-redis-repositori">How to configure and use KeyExpirationEventMessageListener with Redis Repositories?</a></li>
  <li><a href="https://engineering.salesforce.com/lessons-learned-using-spring-data-redis-f3121f89bff9/">스프링 데이터 Redis를 사용하여 얻은 교훈 - Salesforce 엔지니어링 블로그</a></li>
  <li><a href="https://stackoverflow.com/questions/57573289/spring-data-redis-repository-returning-null-for-expired-entries">java - Spring Data Redis Repository returning null for expired entries - Stack Overflow</a></li>
  <li><a href="https://www.youtube.com/live/Wlqu1xvZCak?si=5t5AAwMk2N1Ve18U">토비의 봄 - 스프링 리액티브 프로그래밍(3)</a></li>
  <li><a href="https://techblog.woowahan.com/12903/">배민스토어 - 우리만의 자유로운 WebFlux Practices</a></li>
  <li><a href="https://techblog.woowahan.com/13429/">로그 및 SQL 진입점 정보 추가 여정</a></li>
</ul>

<h3 id="hibernate">Hibernate</h3>

<ul>
  <li><a href="https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html">https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html</a></li>
  <li><a href="https://techblog.woowahan.com/2675/">코틀린에서 하이버네이트를 사용할 수 있을까? | 우아한형제들 기술블로그</a></li>
  <li><a href="https://techblog.woowahan.com/2695/">MySQL 환경의 스프링부트에 하이버네이트 배치 설정 해보기 | 우아한형제들 기술블로그</a></li>
</ul>

<h3 id="mybatis">MyBatis</h3>

<ul>
  <li><a href="https://mybatis.org/mybatis-3/ko/sqlmap-xml.html">https://mybatis.org/mybatis-3/ko/sqlmap-xml.html</a></li>
</ul>

<h3 id="jpa">JPA</h3>

<ul>
  <li><a href="https://www.youtube.com/watch?v=zMAX7g6rO_Y">우아콘2020 - 수십억건에서 QUERYDSL 사용하기 - YouTube</a></li>
  <li><a href="https://jojoldu.tistory.com/516?category=637935">JPA exists 쿼리 성능 개선</a></li>
  <li><a href="https://jojoldu.tistory.com/523?category=637935">Querydsl select에서 상수 사용하기</a></li>
  <li><a href="https://jojoldu.tistory.com/528?category=637935">1. 페이징 성능 개선하기 - No Offset 사용하기</a></li>
  <li><a href="https://jojoldu.tistory.com/529?category=637935">2. 페이징 성능 개선하기 - 커버링 인덱스 사용하기</a></li>
  <li><a href="https://jojoldu.tistory.com/530?category=637935">3-1. 페이징 성능 개선하기 - 검색 버튼 사용시 페이지 건수 고정하기</a></li>
  <li><a href="https://jojoldu.tistory.com/531?category=637935">3-2. 페이징 성능 개선하기 - 첫 페이지 조회 결과 cache 하기</a></li>
  <li><a href="https://techblog.woowahan.com/2595/">Legacy DB의 JPA Entity Mapping (복합키 매핑 편) | 우아한형제들 기술블로그</a></li>
  <li><a href="https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html">Configuring setuptools using pyproject.toml files - setuptools</a></li>
</ul>

<h3 id="others">Others</h3>

<ul>
  <li><a href="https://github.com/line/armeria/issues/4510">Replace <code class="language-plaintext highlighter-rouge">synchonized</code> block with <code class="language-plaintext highlighter-rouge">ReentrantLock</code> to make virtual thread friendly</a></li>
  <li><a href="http://hatemogi.github.io/netty-startup/#1">Netty</a></li>
  <li><a href="https://vertx.io/docs/vertx-web-client/java/">https://vertx.io/docs/vertx-web-client/java/</a></li>
</ul>

<h2 id="redis">Redis</h2>

<ul>
  <li>https://www.slideshare.net/charsyam2/how-to-use-redis-well</li>
  <li><a href="https://redis.io/docs/manual/keyspace-notifications/">Redis keyspace notifications | Redis</a></li>
  <li><a href="https://engineering.ab180.co/stories/thanos-redis">Redis 사용량 타노스하기</a></li>
</ul>

<h2 id="python">Python</h2>

<ul>
  <li><a href="https://stackoverflow.com/questions/7811247/how-to-fill-specific-positional-arguments-with-partial-in-python">How to fill specific positional arguments with partial in python? - Stack Overflow</a></li>
  <li><a href="https://stackoverflow.com/questions/63326840/specifying-command-line-scripts-in-pyproject-toml">python - Specifying command line scripts in pyproject.toml - Stack Overflow</a></li>
  <li><a href="https://wiki.python.org/moin/TimeComplexity">Time Complexity</a></li>
  <li><a href="https://textual.textualize.io/blog/2023/02/11/the-heisenbug-lurking-in-your-async-code/">The Heisenbug lurking in your async code - Textual</a></li>
  <li><a href="https://textual.textualize.io/blog/2024/02/11/file-magic-with-the-python-standard-library/">File magic with the Python standard library</a></li>
  <li><a href="https://textual.textualize.io/blog/2023/03/15/no-async-async-with-python/">No-async async with Python</a></li>
  <li><a href="https://textual.textualize.io/blog/2023/03/08/overhead-of-python-asyncio-tasks/">Overhead of Python Asyncio tasks - Textual</a></li>
  <li><a href="https://stackoverflow.com/questions/48971121/what-is-the-difference-between-semaphore-and-boundedsemaphore">python - What is the difference between .Semaphore() and .BoundedSemaphore()? - Stack Overflow</a></li>
  <li><a href="https://stackoverflow.com/questions/75250788/how-to-prevent-python3-11-taskgroup-from-canceling-all-the-tasks">python - How to prevent python3.11 TaskGroup from canceling all the tasks - Stack Overflow</a></li>
  <li><a href="https://www.roguelynn.com/words/asyncio-graceful-shutdowns/">Graceful Shutdowns with asyncio – roguelynn</a></li>
</ul>

<h3 id="pep">PEP</h3>

<ul>
  <li><a href="https://peps.python.org/pep-0342/">PEP 342 – Coroutines via Enhanced Generators</a></li>
  <li><a href="https://peps.python.org/pep-0484/">PEP 484 - Type Hints</a></li>
  <li><a href="https://peps.python.org/pep-0492/">PEP 492 - Coroutines with async and await syntax</a></li>
  <li><a href="https://peps.python.org/pep-0525/">PEP 525 - Asynchronous Generators</a></li>
  <li><a href="https://peps.python.org/pep-0526/">PEP 526 – Syntax for Variable Annotations</a></li>
  <li><a href="https://peps.python.org/pep-0530/">PEP 530 - Asynchronous Comprehensions</a></li>
  <li><a href="https://peps.python.org/pep-0557/">PEP 557 - Data Classes</a></li>
  <li><a href="https://peps.python.org/pep-0562/">PEP 562 – Module <code class="language-plaintext highlighter-rouge">__getattr__</code> and <code class="language-plaintext highlighter-rouge">__dir__</code></a></li>
  <li><a href="https://peps.python.org/pep-0572/">PEP 572 – Assignment Expressions</a></li>
  <li><a href="https://peps.python.org/pep-0586/">PEP 586 – Literal Types</a></li>
  <li><a href="https://peps.python.org/pep-0593/">PEP 593 – Flexible function and variable annotations</a></li>
  <li><a href="https://peps.python.org/pep-0604/">PEP 604 – Allow writing union types as X | Y</a></li>
  <li><a href="https://peps.python.org/pep-0613/">PEP 613 – Explicit Type Aliases</a></li>
  <li><a href="https://peps.python.org/pep-0616/">PEP 616 – String methods to remove prefixes and suffixes</a></li>
  <li><a href="https://peps.python.org/pep-0634/">PEP 634 – Structural Pattern Matching: Specification</a></li>
  <li><a href="https://peps.python.org/pep-0647/">PEP 647 – User-Defined Type Guards</a></li>
  <li><a href="https://peps.python.org/pep-0654/">PEP 654 – Exception Groups and except*</a></li>
  <li><a href="https://peps.python.org/pep-0655/">PEP 655 – Marking individual TypedDict items as required or potentially-missing</a></li>
  <li><a href="https://peps.python.org/pep-0669/">PEP 669 – Low Impact Monitoring for CPython</a></li>
  <li><a href="https://peps.python.org/pep-0673/">PEP 673 – Self Type</a></li>
  <li><a href="https://peps.python.org/pep-0675/">PEP 675 – Arbitrary Literal String Type</a></li>
  <li><a href="https://peps.python.org/pep-0681/">PEP 681 – Data Class Transforms</a></li>
</ul>

<h3 id="테스팅">테스팅</h3>

<ul>
  <li><a href="https://www.revsys.com/tidbits/en-rich-your-python-testing/">“En-Rich” your Python testing</a></li>
</ul>

<h3 id="프레임워크">프레임워크</h3>

<h4 id="puppeteer--playwright">Puppeteer / Playwright</h4>

<ul>
  <li><a href="https://serpapi.com/blog/puppeteer-antipatterns/">Avoiding Puppeteer Antipatterns</a></li>
</ul>

<h4 id="sqlalchemy">SQLAlchemy</h4>

<ul>
  <li><a href="https://www.hides.kr/1103">FastAPI에서 SQLAlchemy Session 다루는 방법</a></li>
  <li><a href="https://hides.tistory.com/1102">SQLAlchemy AsyncSession으로 비동기 적용하며 생긴 문제점</a></li>
  <li><a href="https://hides.tistory.com/1101">SQLAlchemy AsyncSession으로 비동기 적용하기</a></li>
  <li><a href="https://blog.neonkid.xyz/266">FastAPI 8. 비동기 처리에서 SQLAlchemy의 <code class="language-plaintext highlighter-rouge">scoped_session</code> 이 문제가 되는 이유</a></li>
</ul>

<h2 id="비동기">비동기</h2>

<ul>
  <li><a href="https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/">What Color is Your Function? - Bob Nystrom, Google</a>
    <ul>
      <li><a href="https://elizarov.medium.com/how-do-you-color-your-functions-a6bb423d936d">How do you color your function? - Roman Elizarov, Kotlin Lead</a></li>
    </ul>
  </li>
  <li><a href="https://muchtrans.com/translations/notes-on-structured-concurrency-or-go-statement-considered-harmful.ko.html">구조적 동시성에 대한 소고, 또는 Go 문의 해로움</a></li>
  <li><a href="https://trio.readthedocs.io/en/latest/design.html">Trio의 디자인 설계 원칙</a></li>
  <li><a href="https://stackoverflow.com/questions/71938799/python-asyncio-create-task-really-need-to-keep-a-reference">Python의 AsyncIO Task는 참조 변수가 유지되어야 하는가</a></li>
  <li><a href="https://tech.madup.com/python-asyncio-intro/">Python AsyncIO를 활용한 효율적인 광고 데이터 수집</a></li>
  <li><a href="https://stackoverflow.com/questions/49005651/how-does-asyncio-actually-work">How does asyncio actually work?</a></li>
  <li><a href="https://docs.python-guide.org/writing/gotchas/#common-gotchas">The Hitchhiker’s Guide to Python - Common Gotchas</a></li>
  <li><a href="https://d2.naver.com/helloworld/1203723">Virtual Thread의 기본 개념 이해하기</a></li>
  <li><a href="https://techblog.woowahan.com/15398/">Java의 미래, Virtual Thread</a></li>
  <li><a href="https://www.youtube.com/watch?v=zluKcazgkV4">Coroutines and Loom behind the scenes by Roman Elizarov</a></li>
  <li><a href="https://dev.gmarket.com/82">코루틴(Coroutine)에 대하여</a></li>
  <li><a href="http://d2l.ai/chapter_computational-performance/async-computation.html">Asynchronous Computation - D2L.ai</a></li>
</ul>

<h2 id="컨테이너">컨테이너</h2>

<h3 id="docker">Docker</h3>

<ul>
  <li><a href="https://hynek.me/articles/docker-signals/">Why Your Dockerized Application Isn’t Receiving Signals</a></li>
</ul>

<h2 id="data">Data</h2>

<h3 id="엔지니어링">엔지니어링</h3>

<ul>
  <li><a href="https://github.com/igorbarinov/awesome-data-engineering">igorbarinov/awesome-data-engineering: A curated list of data engineering tools for software developers</a></li>
  <li><a href="https://blog.doctor-cha.com/building-autopedia-data-warehouse">오토피디아 데이터 웨어하우스 구축하기</a></li>
  <li><a href="https://d2.naver.com/helloworld/5766317">데이터 품질 이슈로 발생하는 data downtime을 줄이자</a></li>
</ul>

<h3 id="kafka">Kafka</h3>

<ul>
  <li><a href="https://d2.naver.com/helloworld/0974525">KafkaConsumer Client Internals</a></li>
  <li><a href="https://www.youtube.com/watch?v=7_VdIFH6M6Q">신뢰성 있는 카프카 애플리케이션을 만드는 3가지 방법</a></li>
  <li><a href="https://d2.naver.com/helloworld/7181840">Kafka에서 파티션 증가 없이 동시 처리량을 늘리는 방법 - Parallel Consumer</a></li>
  <li><a href="https://blog.voidmainvoid.net/429">카프카를 이벤트 소싱, CQRS로 사용할 수 있을까?</a>
    <ul>
      <li><a href="https://dzone.com/articles/apache-kafka-is-not-for-event-sourcing">Apache Kafka Is Not for Event Sourcing</a></li>
    </ul>
  </li>
</ul>

<h3 id="airflow">Airflow</h3>

<ul>
  <li><a href="https://medium.com/daangn/dbt%EC%99%80-airflow-%EB%8F%84%EC%9E%85%ED%95%98%EB%A9%B0-%EB%A7%88%EC%A3%BC%ED%95%9C-7%EA%B0%80%EC%A7%80-%EB%AC%B8%EC%A0%9C%EB%93%A4-61250a9904ab">DBT와 Airflow 도입하며 마주한 7가지 문제들</a></li>
  <li><a href="https://medium.com/wantedjobs/pov-%EC%8A%AC%EB%9E%99-bolt%EB%A1%9C-%EC%97%90%EC%96%B4%ED%94%8C%EB%A1%9C%EC%9A%B0-dag-%EC%8B%A4%ED%96%89%EC%8B%9C%ED%82%A4%EA%B8%B0-641ca6398234">pov: 슬랙 bolt로 에어플로우 DAG 실행시키기</a></li>
  <li><a href="https://medium.com/naver-place-dev/airflow-task-failed-alert-mail-%ED%8F%AD%ED%83%84-%ED%9A%8C%ED%94%BC%ED%95%98%EA%B8%B0-4cec56334a71">Airflow Task failed Alert Mail 폭탄 회피하기</a></li>
  <li><a href="https://tech.buzzvil.com/blog/%EC%85%80%ED%94%84-%EC%84%9C%EB%B9%99-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%94%8C%EB%9E%AB%ED%8F%BC-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0/">Self Serving Data Platform 구축하기 (feat. Airflow)</a></li>
  <li><a href="https://tech.buzzvil.com/blog/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-ci-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B0%9C%EC%84%A0%EA%B8%B0/">데이터 엔지니어의 Airflow 데이터 파이프라인 CI 테스트 개선기</a></li>
</ul>

<h3 id="스크래핑">스크래핑</h3>

<ul>
  <li><a href="https://medium.com/@aziernicki.ariel/automated-scraping-framework-for-price-monitoring-airflow-scrapy-5287dbbb9f0c">Automated scraping framework for price monitoring (Airflow + Scrapy)</a></li>
</ul>

<h3 id="모니터링">모니터링</h3>

<ul>
  <li><a href="https://engineering.linecorp.com/ko/blog/log-collection-system-sentry-on-premise/">Sentry로 사내 에러 로그 수집 시스템 구축하기 - LINE ENGINEERING</a></li>
</ul>

<h3 id="elasticsearch">ElasticSearch</h3>

<ul>
  <li><a href="https://www.elastic.co/kr/blog/implement-image-similarity-search-elastic">이미지 유사성 검색을 구현하는 방법| Elastic.co| Elastic Blog</a></li>
  <li><a href="https://blog.dramancompany.com/2022/11/%EC%B6%94%EC%B2%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A0%81%EC%9A%A9%EC%9D%84-%EC%9C%84%ED%95%9C-elastic-search-%EB%8F%84%EC%9E%85%EA%B8%B0/">추천 시스템 서비스 적용을 위한 Elastic Search 도입기 - DRAMA&amp;COMPANY</a></li>
  <li><a href="https://helloworld.kurly.com/blog/2023-review-opensearch/">후기 서비스 AWS Opensearch 도입기</a></li>
</ul>

<h2 id="cicd">CI/CD</h2>

<ul>
  <li><a href="https://dev.gmarket.com/88">Jenkins 성능 개선 part1 - 캐싱 적용</a></li>
</ul>

<h2 id="linux">Linux</h2>

<ul>
  <li><a href="https://learnbyexample.github.io/learn_gnuawk/cover.html">CLI text processing with GNU awk</a></li>
</ul>

<h2 id="협업">협업</h2>

<ul>
  <li><a href="https://techblog.woowahan.com/2677/">팀 문화의 탄생 - 손권남, 우아한기술블로그</a></li>
</ul>

<h2 id="기타">기타</h2>

<ul>
  <li><a href="https://moonsub-kim.github.io/docs/delivery-hero/reliability-manifesto/">The Delivery Hero Reliability Manifesto</a></li>
  <li><a href="https://blog.shiren.dev/2020-07-27-1/">이벤트 핸들러를 대하는 개발자의 자세</a></li>
  <li><a href="https://github.com/cloudcommunity/Cloud-Free-Tier-Comparison">Cloud Service Providers Free Tier Overview</a></li>
  <li><a href="https://github.com/RyuaNerin/only-stackoverflow">검색에서 스택오버플로 짭 숨기기 (구글, 덕덕고 + adgaurd, ublock)</a></li>
  <li><a href="https://techblog.woowahan.com/2645/">개발자 머피의 법칙</a></li>
  <li><a href="https://velog.io/@superlipbalm/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior">React 렌더링 동작에 대한 (거의) 완벽한 가이드</a></li>
  <li><a href="https://engineering.linecorp.com/ko/blog/visualizing-test-automation-with-elk-grafana">ELK와 Grafana를 이용해 테스트 자동화 시각화하기</a></li>
  <li><a href="https://www.learnui.design/blog/ios-design-guidelines-templates.html">The iOS 16 Design Guidelines: An Illustrated Guide</a></li>
  <li><a href="https://blog.banksalad.com/tech/go-best-practice-in-banksalad/">뱅크샐러드 Go 코딩 컨벤션</a></li>
</ul>

<h2 id="불난-집-구경">불난 집 구경</h2>

<ul>
  <li><a href="https://graydon2.dreamwidth.org/307291.html">The Rust I Wanted Had No Future</a></li>
  <li><a href="https://faultlore.com/blah/swift-abi/">How Swift Achieved Dynamic Linking Where Rust Couldn’t - Faultlore</a></li>
  <li><a href="https://www.fastcompany.com/90369697/googles-new-recaptcha-has-a-dark-side">Google’s new reCAPTCHA has a dark side</a></li>
</ul>]]></content><author><name>cda2</name></author><category term="History" /><category term="Reference" /><summary type="html"><![CDATA[디자인]]></summary></entry><entry><title type="html">만났던 개발 서적</title><link href="https://cda2.github.io/history/book/2024/04/22/%EB%A7%8C%EB%82%AC%EB%8D%98-%EA%B0%9C%EB%B0%9C-%EC%84%9C%EC%A0%81.html" rel="alternate" type="text/html" title="만났던 개발 서적" /><published>2024-04-22T18:51:00+00:00</published><updated>2024-04-22T18:51:00+00:00</updated><id>https://cda2.github.io/history/book/2024/04/22/%EB%A7%8C%EB%82%AC%EB%8D%98%20%EA%B0%9C%EB%B0%9C%20%EC%84%9C%EC%A0%81</id><content type="html" xml:base="https://cda2.github.io/history/book/2024/04/22/%EB%A7%8C%EB%82%AC%EB%8D%98-%EA%B0%9C%EB%B0%9C-%EC%84%9C%EC%A0%81.html"><![CDATA[<h2 id="설계">설계</h2>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001033116">가상 면접 사례로 배우는 대규모 시스템 설계 기초</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000211656186">가상 면접 사례로 배우는 대규모 시스템 설계 기초 2</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001766328">데이터 중심 애플리케이션 설계</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001810379">이벤트 기반 마이크로서비스 구축</a></li>
</ul>

<h2 id="패턴">패턴</h2>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001810483">헤드 퍼스트 디자인 패턴</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001952246">함수형 코딩</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001834349">마이크로 서비스 패턴</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001810495">도메인 주도 개발 시작하기: DDD 핵심 개념 정리부터 구현까지</a></li>
</ul>

<h2 id="소프트웨어-품질">소프트웨어 품질</h2>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001032980">클린 코드</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001033082">클린 아키텍처: 소프트웨어 구조와 설계의 원칙</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000061353995">좋은 코드, 나쁜 코드</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000208791976">스트리트 코더</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001952236">프로그래머의 뇌</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001766290">Code Complete 코드 컴플리트 - 2판</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001766367">오브젝트</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000212999739">켄트 벡의 Tidy First?: 더 나은 소프트웨어 설계를 위한 32가지 코드 정리법</a></li>
</ul>

<h2 id="언어별">언어별</h2>

<h3 id="python">Python</h3>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001810383">고성능 파이썬 - 2판</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001057838">전문가를 위한 파이썬 - Fluent Python</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000061550477">전문가를 위한 파이썬 프로그래밍 - 제4판 - Expert Python Programming</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001834494">파이썬 코딩의 기술 - Effective Python 2ND</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001810393">파이썬으로 살펴보는 아키텍처 패턴: TDD, DDD, EDM 적용하기</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000201558138">파이썬 라이브러리를 활용한 데이터 분석</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001810381">파이썬 비동기 라이브러리 AsyncIO</a></li>
</ul>

<h3 id="jvm">JVM</h3>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000213057051">JVM 밑바닥까지 파헤치기</a></li>
</ul>

<h4 id="spring">Spring</h4>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000000935360">토비의 스프링 3.1</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001932754">스프링 부트 실전 활용 마스터</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001810077">스프링5 레시피</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001766309">스프링 철저 입문</a></li>
</ul>

<h4 id="java">Java</h4>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001033066">이펙티브 자바 - 3판</a></li>
</ul>

<h4 id="kotlin">Kotlin</h4>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001033129">이펙티브 코틀린</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000210537188">코틀린 코루틴</a></li>
</ul>

<h3 id="typescript">Typescript</h3>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001033114">이펙티브 타입스크립트</a></li>
</ul>

<h2 id="데이터-파이프라인">데이터 파이프라인</h2>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000201435653">데이터 품질의 비밀</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001810100">스파크 완벽 가이드</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001952239">Apache Airflow 기반의 데이터 파이프라인</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001932755">엘라스틱 스택 개발부터 운영까지</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001973303">카프카, 데이터 플랫폼의 최강자</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001932756">실전 카프카 개발부터 운영까지</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000200716128">실시간 데이터 파이프라인 아키텍처</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001842177">아파치 카프카 애플리케이션 프로그래밍 with 자바</a></li>
</ul>

<h2 id="컨테이너">컨테이너</h2>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000208711643">쿠버네티스 교과서</a></li>
</ul>

<h2 id="테스트">테스트</h2>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000201055864">이펙티브 소프트웨어 테스팅</a></li>
</ul>

<h2 id="데이터베이스">데이터베이스</h2>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000060313997">Real MySQL 8.0 세트</a></li>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001766322">대용량 데이터 처리를 위한 Real MongoDB</a></li>
</ul>

<h2 id="협업">협업</h2>

<ul>
  <li><a href="https://product.kyobobook.co.kr/detail/S000001033071">함께 자라기</a></li>
</ul>]]></content><author><name>cda2</name></author><category term="History" /><category term="Book" /><summary type="html"><![CDATA[설계]]></summary></entry><entry><title type="html">Scrapy Feed Exports</title><link href="https://cda2.github.io/scrapy/2024/02/01/Scrapy-Feed-Exports.html" rel="alternate" type="text/html" title="Scrapy Feed Exports" /><published>2024-02-01T18:10:00+00:00</published><updated>2024-02-01T18:10:00+00:00</updated><id>https://cda2.github.io/scrapy/2024/02/01/Scrapy%20Feed%20Exports</id><content type="html" xml:base="https://cda2.github.io/scrapy/2024/02/01/Scrapy-Feed-Exports.html"><![CDATA[<h2 id="개요">개요</h2>

<p>Scrapy의 Feed Exports 기능을 제대로 활용해보자.</p>

<h2 id="일반적인-구조와-문제점">일반적인 구조와 문제점</h2>

<p>Scrapy를 사용 시 비교적 모듈 관리가 잘 되지 않는다. 체계적인 구조나 모듈 관리 등이 이루어지지 않는 경우가 많은데, 아마도 소위 말하는 Best Practice 자체가 보기 힘들기 때문이 아닐까 싶다.</p>

<p>일반적으로 사용되는 간단한 웹 서버와 기본적인 파이프라인을 사용하여 데이터를 백엔드 단으로 전송하는 구조를 보면 다음과 같다.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG5wYXJ0aWNpcGFudCBTIGFzIFNjcmFweVxucGFydGljaXBhbnQgQyBhcyBDcmF3bGVyXG5wYXJ0aWNpcGFudCBCIGFzIEJhY2tlbmRcblMgLT4-IEM6IEl0ZW0gKFlpZWxkKVxuQyAtPj4gQjogSXRlbSAoSFRUUC9zLCBSZXF1ZXN0cylcbkIgLT4-IEM6IFJlc3BvbnNlIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0" /></p>

<p>대부분의 경우 Scrapy에서 상품을 단 건으로 API를 무한정 호출하는 모양새가 되며, 이 때문에 이를 처리하는 백엔드 단에서 많은 부하가 발생한다. 특히,
<strong>커넥션의 개수가 증가하는 경우가 빈번</strong>하다.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG5wYXJ0aWNpcGFudCBTIGFzIFNjcmFweVxucGFydGljaXBhbnQgQyBhcyBDcmF3bGVyXG5wYXJ0aWNpcGFudCBCIGFzIEJhY2tlbmRcblMgLSkgQzogSXRlbSAoWWllbGQpXG5DIC0-PiBCOiBJdGVtIChIVFRQL3MsIFJlcXVlc3RzKVxuQiAtPj4gQzogUmVzcG9uc2VcblMgLSkgQzogSXRlbSAoWWllbGQpXG5DIC0-PiBCOiBJdGVtIChIVFRQL3MsIFJlcXVlc3RzKVxuQiAtPj4gQzogUmVzcG9uc2VcblMgLSkgQzogSXRlbSAoWWllbGQpXG5DIC0-PiBCOiBJdGVtIChIVFRQL3MsIFJlcXVlc3RzKVxuQiAtPj4gQzogUmVzcG9uc2VcblMgLSkgQzogSXRlbSAoWWllbGQpXG5DIC0-PiBCOiBJdGVtIChIVFRQL3MsIFJlcXVlc3RzKVxuQiAtPj4gQzogUmVzcG9uc2UiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9fQ" /></p>

<p>결국엔 연결이 끊어지는 경우가 빈번하게 발생하며,</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG5wYXJ0aWNpcGFudCBTIGFzIFNjcmFweVxucGFydGljaXBhbnQgQiBhcyBCYWNrZW5kXG5TIC0teCBCOiBJdGVtIChZaWVsZClcblMgLS14IEI6IEl0ZW0gKFlpZWxkKVxuUyAtLXggQjogSXRlbSAoWWllbGQpXG5TIC0teCBCOiBJdGVtIChZaWVsZCkiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9fQ" /></p>

<p>이를 처리하기 위해 <strong>서버 측에서</strong> 보완할 방법을 찾아야 한다.</p>

<p>또한 Scrapy 는 Twisted 기반의 비동기 방식으로 동작하기 때문에 Pipeline에서 동기 방식으로 처리하는 경우, Scrapy 의 수집을 블로킹하는 문제가 있다.</p>

<p>이를 방지하기 위해서는 비동기 방식으로 처리해야 하지만, 비동기 방식으로 처리한다고 안정적인 성능이나 개선된 속도를 보장할 수 있는 것은 아니다.</p>

<p>단 건 처리 시 이론적인 성능은 좋을 수 있으나, keep-alive 커넥션이나 커넥션 풀링, 세션 등의 기능을 사용하지 않는다면 HTTP 통신 과정 상 커넥션 수립과 해제에 백엔드 단에서 많은 부하가 발생한다. 이러한 문제들을 개선할 수 있는 것이 바로 Feed Exports 기능이다.</p>

<h2 id="feed-exports">Feed Exports</h2>

<p><a href="https://docs.scrapy.org/en/latest/topics/feed-exports.html">Feed Exports</a> 공식 문서를 보면, 생각보다 문서가 빈약하고 특정한 파일 형식으로 추출이 가능하다는 정도만 보여지지만,
<strong>실제로는 다양한 파일 저장소에 원하는 형식과 규칙으로 매우 쉽게 저장이 가능하다.</strong></p>

<p>특히 AWS 측을 사용하고 있다면 S3에 즉각적으로 저장이 가능하다. 단, 장점만 있는 것은 아니며 파일을 저장하는 과정에서 덮어쓰기 방식으로 저장되기 때문에 비효율적일 수도 있다.</p>

<p>하지만 일반적으로 백엔드 서버와의 통신 과정에서 발생하는 커넥션 수립과 해제에 따른 부하를 크게 줄일 수 있으며, 이를 통해 백엔드 서버의 성능을 향상시킬 수 있다. 그리고 내장 기능이기 때문에 날로 먹기에도 좋다.</p>

<h3 id="feed-exports-사용하기">Feed Exports 사용하기</h3>

<p><a href="https://docs.scrapy.org/en/latest/topics/feed-exports.html#feeds">FEEDS 설정</a> 참고.</p>

<p>Feed Exports를 사용하기 위해서는 <code class="language-plaintext highlighter-rouge">FEEDS</code> 설정을 통해 사용할 파일 저장소를 지정해주면 된다. 아래는 S3에 저장하는 예제이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FEEDS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'s3://bucket-name/path/to/file.jl'</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">'format'</span><span class="p">:</span> <span class="s">'jl'</span><span class="p">,</span>
        <span class="s">'encoding'</span><span class="p">:</span> <span class="s">'utf8'</span><span class="p">,</span>
        <span class="s">'store_empty'</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="s">'indent'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
        <span class="s">'postprocessing'</span><span class="p">:</span> <span class="p">[</span>
            <span class="s">'scrapy.extensions.postprocessing.GzipPlugin'</span>
        <span class="p">]</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>

<p>일반적으로 <a href="http://jsonlines.org/">jsonlines</a> 형식으로 저장하며, <code class="language-plaintext highlighter-rouge">postprocessing</code> 설정을 통해 압축 등의 후처리를 지원한다.
JSON 형식이나 CSV 등의 파일 형식 또한 지원되나, 하나의 파일 형식을 유지하기 위해 비효율적으로 처리하거나, 수집기 바깥에서 설정 값들을 설정해 주어야 하는 경우가 많아 번거롭다.</p>

<h3 id="signal-응용하기">Signal 응용하기</h3>

<p>여기까지만 보면 이를 서버와 연동하는 것은 다소 어려워 보인다. 특히, 날짜나 특정한 커스텀 규칙에 따라서 보내주는 것은 어떻게 해야 할 지 의아하게 보인다.</p>

<p>하지만 Scrapy 는 <a href="https://docs.scrapy.org/en/latest/topics/signals.html">Signal</a> 기능을 제공한다. 이를 통해 Feed Exports 기능을 사용하면, <code class="language-plaintext highlighter-rouge">FEEDS</code> 설정에 지정한 파일이 생성되는 이벤트가 발생하며, 해당 이벤트를 통지하는 시그널을 받아서 이에 대한 처리를 할 수 있다.</p>

<p>시그널들을 적극적으로 활용한다면, Scrapy 내부 시퀀스를 다음과 같이 도식화 할 수 있다.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG5hdXRvbnVtYmVyXG5wYXJ0aWNpcGFudCBDIGFzIENyYXdsZXJcbnBhcnRpY2lwYW50IFMgYXMgU3BpZGVyXG5wYXJ0aWNpcGFudCBQIGFzIFBpcGVsaW5lXG5wYXJ0aWNpcGFudCBGIGFzIEZlZWQgRXhwb3J0ZXJcbiUlLVxuYm94IHJnYig3NSwgMTAwLCA5MCkgU3BlY2lmaWMgRmlsZSBTbG90XG5wYXJ0aWNpcGFudCBGUyBhcyBGZWVkIFNsb3RcbnBhcnRpY2lwYW50IEJGIGFzIEJ1ZmZlclxucGFydGljaXBhbnQgTCBhcyBMb2NhbCBUZW1wb3JhcnkgRmlsZVxuZW5kXG4lJS1cbnBhcnRpY2lwYW50IEggYXMgRmVlZCBTaWduYWwgSGFuZGxlclxucGFydGljaXBhbnQgQiBhcyBCYWNrZW5kXG5DIC0tPiBTOiBTdGFydCBTcGlkZXJcblMgLSkgQzogSXRlbSAoWWllbGQpXG5DIC0-PiBQOiBJdGVtXG5hY3RpdmF0ZSBQXG5QIC0tPj4rIEM6IEl0ZW0gKEZpbHRlcmVkKVxuZGVhY3RpdmF0ZSBQXG5DIC0pIEY6IEl0ZW0sIFNpZ25hbCAoSXRlbSBTY3JhcGVkKVxuRiAtPj4gRlM6IEl0ZW1cbkZTIC0-PiBCRjogSXRlbSAoQnVmZmVyKVxuQkYgLT4-IEw6IEl0ZW0ocyksIEZsdXNoXG5TIC0pIEM6IFNpZ25hbCBUcmlnZ2VyIChTcGlkZXIgQ2xvc2VkKVxuQyAtKSBGOiBTaWduYWwgKFNwaWRlciBDbG9zZWQpXG5GIC0-PiBGUzogQ2xvc2UgU2xvdFxuRlMgLT4-IEJGOiBGbHVzaFxuQkYgLT4-IEw6IEl0ZW0ocyksIEZsdXNoXG5MIC0tPj4gRlM6IEZpbGUgKENsb3NlZClcbkZTIC0pIEY6IFNpZ25hbCBUcmlnZ2VyIChGZWVkIFNsb3QgQ2xvc2VkKVxuRiAtKSBDOiBTaWduYWwgVHJpZ2dlciAoRmVlZCBFeHBvcnRlciBDbG9zZWQpXG5DIC0-PiBIOiBTaWduYWwgKEZlZWQgRXhwb3J0ZXIgQ2xvc2VkKVxuSCAtLT4-IEg6IEhhbmRsZSBTaWduYWwgKEZlZWQgRXhwb3J0ZXIgQ2xvc2VkKVxuSCAtPj4gQjogRmlsZSIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In19" /></p>

<p>따라서 API 를 무한정 호출하는 것이 아니라, **파일을 생성하는 시점에 백엔드 단으로 전송
**하면 된다. 특히 S3 등의 외부 저장소를 사용한다면, 두 서비스 간의 통신 부하가 크게 줄어들게 된다. 또한, 일반적으로 동기/비동기 방식을 떠나 HTTP/s 통신 과정에서 수집 속도가 저하되는 경우가 많은데, 이를 통해 수집 속도를 극적으로 개선할 수 있다.</p>

<p>또한, 외부 저장소에 저장한 파일을 서버 측에서는 chunk 단위로 읽어서 bulk 처리하면 된다. 이를 통해 <strong>커넥션 수립과 해제에 따른
부하를 크게 줄일 수 있다.</strong></p>

<p>단점으로는, 이 방법은 **실시간 처리가 불가능해지는 단점
**이 있다. 하지만 그 정도로 실시간 성이 중요하다면 애초에 Scrapy 를 사용하지 않는 것이 좋다.</p>

<h3 id="주의-사항">주의 사항</h3>

<ul>
  <li>
    <p>Signal 을 사용하여 서버와 연동하는 경우, Scrapy에서 Signal 의 유형에 따라 <code class="language-plaintext highlighter-rouge">Deffered</code> 객체 지원 여부가 달라진다. 따라서 <code class="language-plaintext highlighter-rouge">Deffered</code> 객체를 지원하지 않는 경우, 서버와의 통신은 <code class="language-plaintext highlighter-rouge">Deffered</code> 기반의 비동기 방식으로 처리할 수 없다.</p>

    <ul>
      <li>지원하더라도, <code class="language-plaintext highlighter-rouge">Coroutine</code> 객체를 <code class="language-plaintext highlighter-rouge">Deferred</code> 객체로 변환하여 Return 처리 해야하므로, 다소 디버깅이 어려울 수 있다.</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Coroutine</code> 객체를 <code class="language-plaintext highlighter-rouge">Deferred</code> 객체로 변환하기에는 까다로울 수 있으므로, scrapy 내부에 있는 <code class="language-plaintext highlighter-rouge">deferred_from_coro</code> 함수를 사용하는 것도 좋은 방법이다. <a href="https://github.com/scrapy/scrapy/blob/6f73dc0e676b5ff440daae7f064e855eb0de428f/scrapy/utils/defer.py#L316C1-L328C13">구현 코드</a> 를 참고하는 것이 정신 건강에 좋다.</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">deferred_from_coro</span><span class="p">(</span><span class="n">o</span><span class="p">:</span> <span class="n">_T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Union</span><span class="p">[</span><span class="n">Deferred</span><span class="p">,</span> <span class="n">_T</span><span class="p">]:</span>
    <span class="s">"""Converts a coroutine into a Deferred, or returns the object as is if it isn't a coroutine"""</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">Deferred</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">o</span>
    <span class="k">if</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">isfuture</span><span class="p">(</span><span class="n">o</span><span class="p">)</span> <span class="ow">or</span> <span class="n">inspect</span><span class="p">.</span><span class="n">isawaitable</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">is_asyncio_reactor_installed</span><span class="p">():</span>
            <span class="c1"># wrapping the coroutine directly into a Deferred, this doesn't work correctly with coroutines
</span>            <span class="c1"># that use asyncio, e.g. "await asyncio.sleep(1)"
</span>            <span class="k">return</span> <span class="n">ensureDeferred</span><span class="p">(</span><span class="n">cast</span><span class="p">(</span><span class="n">Coroutine</span><span class="p">[</span><span class="n">Deferred</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span> <span class="n">o</span><span class="p">))</span>
        <span class="c1"># wrapping the coroutine into a Future and then into a Deferred, this requires AsyncioSelectorReactor
</span>        <span class="n">event_loop</span> <span class="o">=</span> <span class="n">_get_asyncio_event_loop</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">Deferred</span><span class="p">.</span><span class="n">fromFuture</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ensure_future</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">loop</span><span class="o">=</span><span class="n">event_loop</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">o</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AsyncIO</code> 기반의 비동기 방식으로 처리하는 경우, <code class="language-plaintext highlighter-rouge">Twisted</code> 와 충돌이 발생할 수 있으므로 주의해야 한다.</li>
</ul>]]></content><author><name>cda2</name></author><category term="Scrapy" /><summary type="html"><![CDATA[개요]]></summary></entry><entry><title type="html">Spring Redis Key Expire 이벤트 활용</title><link href="https://cda2.github.io/spring/redis/2023/03/14/Spring-Redis-Key-Expire-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%99%9C%EC%9A%A9.html" rel="alternate" type="text/html" title="Spring Redis Key Expire 이벤트 활용" /><published>2023-03-14T18:04:00+00:00</published><updated>2023-03-14T18:04:00+00:00</updated><id>https://cda2.github.io/spring/redis/2023/03/14/Spring%20Redis%20Key%20Expire%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%ED%99%9C%EC%9A%A9</id><content type="html" xml:base="https://cda2.github.io/spring/redis/2023/03/14/Spring-Redis-Key-Expire-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%99%9C%EC%9A%A9.html"><![CDATA[<p>스프링에서는 Redis의 Key Expire (Keyspace) 이벤트를 활용할 수 있다. 내부 구현을 통해 이벤트를 발생시키는 방법을 알아보자.</p>

<h2 id="key-expire-이벤트-발생">Key Expire 이벤트 발생</h2>

<p>Redis 공식 문서<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> 에 따르면, Expire 이벤트를 수신하기 위해서는 최소한 다음과 같은 플래그 사용이 필요하다.</p>

<ul>
  <li>E (<strong>keyevent@</strong> 접두사로 발행된 Keyevent 이벤트.)</li>
  <li>x (Key가 만료되었을 때 발생하는 이벤트.)</li>
</ul>

<p>Redis에서 설정을 사용하기 위해서는 <code class="language-plaintext highlighter-rouge">redis.conf</code> 파일을 수정하거나, <code class="language-plaintext highlighter-rouge">redis-cli</code>를 통해 설정을 변경할 수 있다.<br />
<code class="language-plaintext highlighter-rouge">redis.conf</code> 파일을 수정하는 경우, 다음과 같이 설정을 수정한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>notify-keyspace-events "Ex"
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">redis-cli</code>를 통해 설정을 변경하는 경우, 다음과 같이 설정을 변경한다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redis-cli CONFIG SET notify-keyspace-events <span class="s2">"Ex"</span>
</code></pre></div></div>

<h2 id="key-expire-이벤트-수신">Key Expire 이벤트 수신</h2>

<p>Spring에서는 Redis의 Key Expire 이벤트를 수신하기 위해서는 다음과 같은 설정이 필요하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@EnableRedisRepositories</span><span class="o">(</span><span class="n">enableKeyspaceEvents</span> <span class="o">=</span> <span class="nc">EnableKeyspaceEvents</span><span class="o">.</span><span class="na">ON_STARTUP</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfig</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>대체 이 어노테이션이 어떤 기능을 하는지 알아보자.</p>

<h2 id="enableredisrepositories-어노테이션의-작동-방식"><code class="language-plaintext highlighter-rouge">@EnableRedisRepositories</code> 어노테이션의 작동 방식</h2>

<p><code class="language-plaintext highlighter-rouge">@EnableRedisRepositories</code> 어노테이션은 다음과 같이 정의되어 있다.<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * Copyright 2015-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</span>
<span class="kn">package</span> <span class="nn">org.springframework.data.redis.repository.configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.lang.annotation.Documented</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.annotation.ElementType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.annotation.Inherited</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.annotation.Retention</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.annotation.RetentionPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.annotation.Target</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.FactoryBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan.Filter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Import</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.keyvalue.core.KeyValueOperations</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.keyvalue.repository.config.QueryCreatorType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.RedisKeyValueAdapter.EnableKeyspaceEvents</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.RedisKeyValueAdapter.ShadowCopy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.RedisOperations</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.convert.KeyspaceConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.index.IndexConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.listener.KeyExpirationEventMessageListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.repository.query.RedisQueryCreator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.repository.support.RedisRepositoryFactoryBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.repository.config.DefaultRepositoryBaseClass</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.repository.query.QueryLookupStrategy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.repository.query.QueryLookupStrategy.Key</span><span class="o">;</span>

<span class="cm">/**
 * Annotation to activate Redis repositories. If no base package is configured through either {@link #value()},
 * {@link #basePackages()} or {@link #basePackageClasses()} it will trigger scanning of the package of annotated class.
 *
 * @author Christoph Strobl
 * @author Mark Paluch
 * @since 1.7
 */</span>
<span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Documented</span>
<span class="nd">@Inherited</span>
<span class="nd">@Import</span><span class="o">(</span><span class="nc">RedisRepositoriesRegistrar</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@QueryCreatorType</span><span class="o">(</span><span class="nc">RedisQueryCreator</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">EnableRedisRepositories</span> <span class="o">{</span>

    <span class="cm">/**
     * Alias for the {@link #basePackages()} attribute. Allows for more concise annotation declarations e.g.:
     * {@code @EnableRedisRepositories("org.my.pkg")} instead of
     * {@code @EnableRedisRepositories(basePackages="org.my.pkg")}.
     */</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="nf">value</span><span class="o">()</span> <span class="k">default</span> <span class="o">{};</span>

    <span class="cm">/**
     * Base packages to scan for annotated components. {@link #value()} is an alias for (and mutually exclusive with) this
     * attribute. Use {@link #basePackageClasses()} for a type-safe alternative to String-based package names.
     */</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="nf">basePackages</span><span class="o">()</span> <span class="k">default</span> <span class="o">{};</span>

    <span class="cm">/**
     * Type-safe alternative to {@link #basePackages()} for specifying the packages to scan for annotated components. The
     * package of each class specified will be scanned. Consider creating a special no-op marker class or interface in
     * each package that serves no purpose other than being referenced by this attribute.
     */</span>
    <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">basePackageClasses</span><span class="o">()</span> <span class="k">default</span> <span class="o">{};</span>

    <span class="cm">/**
     * Specifies which types are not eligible for component scanning.
     */</span>
    <span class="nc">Filter</span><span class="o">[]</span> <span class="nf">excludeFilters</span><span class="o">()</span> <span class="k">default</span> <span class="o">{};</span>

    <span class="cm">/**
     * Specifies which types are eligible for component scanning. Further narrows the set of candidate components from
     * everything in {@link #basePackages()} to everything in the base packages that matches the given filter or filters.
     */</span>
    <span class="nc">Filter</span><span class="o">[]</span> <span class="nf">includeFilters</span><span class="o">()</span> <span class="k">default</span> <span class="o">{};</span>

    <span class="cm">/**
     * Returns the postfix to be used when looking up custom repository implementations. Defaults to {@literal Impl}. So
     * for a repository named {@code PersonRepository} the corresponding implementation class will be looked up scanning
     * for {@code PersonRepositoryImpl}.
     *
     * @return
     */</span>
    <span class="nc">String</span> <span class="nf">repositoryImplementationPostfix</span><span class="o">()</span> <span class="k">default</span> <span class="s">"Impl"</span><span class="o">;</span>

    <span class="cm">/**
     * Configures the location of where to find the Spring Data named queries properties file.
     *
     * @return
     */</span>
    <span class="nc">String</span> <span class="nf">namedQueriesLocation</span><span class="o">()</span> <span class="k">default</span> <span class="s">""</span><span class="o">;</span>

    <span class="cm">/**
     * Returns the key of the {@link QueryLookupStrategy} to be used for lookup queries for query methods. Defaults to
     * {@link Key#CREATE_IF_NOT_FOUND}.
     *
     * @return
     */</span>
    <span class="nc">Key</span> <span class="nf">queryLookupStrategy</span><span class="o">()</span> <span class="k">default</span> <span class="nc">Key</span><span class="o">.</span><span class="na">CREATE_IF_NOT_FOUND</span><span class="o">;</span>

    <span class="cm">/**
     * Returns the {@link FactoryBean} class to be used for each repository instance. Defaults to
     * {@link RedisRepositoryFactoryBean}.
     *
     * @return
     */</span>
    <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">repositoryFactoryBeanClass</span><span class="o">()</span> <span class="k">default</span> <span class="nc">RedisRepositoryFactoryBean</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>

    <span class="cm">/**
     * Configure the repository base class to be used to create repository proxies for this particular configuration.
     *
     * @return
     */</span>
    <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">repositoryBaseClass</span><span class="o">()</span> <span class="k">default</span> <span class="nc">DefaultRepositoryBaseClass</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>

    <span class="cm">/**
     * Configures the name of the {@link KeyValueOperations} bean to be used with the repositories detected.
     *
     * @return
     */</span>
    <span class="nc">String</span> <span class="nf">keyValueTemplateRef</span><span class="o">()</span> <span class="k">default</span> <span class="s">"redisKeyValueTemplate"</span><span class="o">;</span>

    <span class="cm">/**
     * Configures whether nested repository-interfaces (e.g. defined as inner classes) should be discovered by the
     * repositories infrastructure.
     */</span>
    <span class="kt">boolean</span> <span class="nf">considerNestedRepositories</span><span class="o">()</span> <span class="k">default</span> <span class="kc">false</span><span class="o">;</span>

    <span class="cm">/**
     * Configures the bean name of the {@link RedisOperations} to be used. Defaulted to {@literal redisTemplate}.
     *
     * @return
     */</span>
    <span class="nc">String</span> <span class="nf">redisTemplateRef</span><span class="o">()</span> <span class="k">default</span> <span class="s">"redisTemplate"</span><span class="o">;</span>

    <span class="cm">/**
     * Set up index patterns using simple configuration class.
     *
     * @return
     */</span>
    <span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">IndexConfiguration</span><span class="o">&gt;</span> <span class="nf">indexConfiguration</span><span class="o">()</span> <span class="k">default</span> <span class="nc">IndexConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>

    <span class="cm">/**
     * Set up keyspaces for specific types.
     *
     * @return
     */</span>
    <span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">KeyspaceConfiguration</span><span class="o">&gt;</span> <span class="nf">keyspaceConfiguration</span><span class="o">()</span> <span class="k">default</span> <span class="nc">KeyspaceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>

    <span class="cm">/**
     * Configure usage of {@link KeyExpirationEventMessageListener}.
     *
     * @return
     * @since 1.8
     */</span>
    <span class="nc">EnableKeyspaceEvents</span> <span class="nf">enableKeyspaceEvents</span><span class="o">()</span> <span class="k">default</span> <span class="nc">EnableKeyspaceEvents</span><span class="o">.</span><span class="na">OFF</span><span class="o">;</span>

    <span class="cm">/**
     * Configure the name of the {@link org.springframework.data.redis.listener.RedisMessageListenerContainer} bean to be
     * used for keyspace event subscriptions. Defaults to use an anonymous managed instance by
     * {@link org.springframework.data.redis.core.RedisKeyValueAdapter}.
     *
     * @return
     * @since 2.7.2
     */</span>
    <span class="nc">String</span> <span class="nf">messageListenerContainerRef</span><span class="o">()</span> <span class="k">default</span> <span class="s">""</span><span class="o">;</span>

    <span class="cm">/**
     * Configuration flag controlling storage of phantom keys (shadow copies) of expiring entities to read them later when
     * publishing {@link org.springframework.data.redis.core.RedisKeyspaceEvent keyspace events}.
     *
     * @return
     * @since 2.4
     */</span>
    <span class="nc">ShadowCopy</span> <span class="nf">shadowCopy</span><span class="o">()</span> <span class="k">default</span> <span class="nc">ShadowCopy</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">;</span>

    <span class="cm">/**
     * Configure the {@literal notify-keyspace-events} property if not already set. &lt;br /&gt;
     * Use an empty {@link String} to keep (&lt;b&gt;not&lt;/b&gt; alter) existing server configuration.
     *
     * @return {@literal Ex} by default.
     * @since 1.8
     */</span>
    <span class="nc">String</span> <span class="nf">keyspaceNotificationsConfigParameter</span><span class="o">()</span> <span class="k">default</span> <span class="s">"Ex"</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div>

<p>클래스와 메서드에 작성되어 있는 주석들을 잘 살펴보면 다음과 같은 중요한 부분들을 발견할 수 있다.</p>

<h3 id="messagelistenercontainerref-설정">MessageListenerContainerRef 설정</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Configure the name of the {@link org.springframework.data.redis.listener.RedisMessageListenerContainer} bean to be
 * used for keyspace event subscriptions. Defaults to use an anonymous managed instance by
 * {@link org.springframework.data.redis.core.RedisKeyValueAdapter}.
 *
 * @return
 * @since 2.7.2
 */</span>
<span class="nc">String</span> <span class="nf">messageListenerContainerRef</span><span class="o">()</span><span class="k">default</span> <span class="s">""</span><span class="o">;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">RedisMessageListenerContainer</code> 에 사용할 빈의 이름을 설정한다. 기본값은 <code class="language-plaintext highlighter-rouge">RedisKeyValueAdapter</code> 에 의해 관리되는 객체를 사용한다.</p>

<p><code class="language-plaintext highlighter-rouge">RedisKeyValueAdapter</code> 에서는 다음과 같이 컨테이너 객체를 생성하고 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initMessageListenerContainer</span><span class="o">(){</span> <span class="c1">// `MessageListenerContainer` 초기화</span>

    <span class="k">this</span><span class="o">.</span><span class="na">messageListenerContainer</span><span class="o">=</span><span class="k">new</span> <span class="nc">RedisMessageListenerContainer</span><span class="o">();</span> <span class="c1">// `RedisMessageListenerContainer` 생성</span>
    <span class="c1">// `RedisMessageListenerContainer` 에 ConnectionFactory 설정</span>
    <span class="k">this</span><span class="o">.</span><span class="na">messageListenerContainer</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(((</span><span class="nc">RedisTemplate</span><span class="o">&lt;?,</span> <span class="o">?&gt;)</span><span class="n">redisOps</span><span class="o">).</span><span class="na">getConnectionFactory</span><span class="o">());</span>
    <span class="c1">// 스레드풀, 비동기 처리 등 설정</span>
    <span class="k">this</span><span class="o">.</span><span class="na">messageListenerContainer</span><span class="o">.</span><span class="na">afterPropertiesSet</span><span class="o">();</span>
    <span class="c1">// container 시작 처리</span>
    <span class="k">this</span><span class="o">.</span><span class="na">messageListenerContainer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="keyspace-notification-설정">Keyspace Notification 설정</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Configure the {@literal notify-keyspace-events} property if not already set. &lt;br /&gt;
 * Use an empty {@link String} to keep (&lt;b&gt;not&lt;/b&gt; alter) existing server configuration.
 *
 * @return {@literal Ex} by default.
 * @since 1.8
 */</span>

<span class="c1">// `notify-keyspace-events` 가 설정되어 있지 않다면, `Ex` 로 설정한다. 빈 문자열을 사용하면 기존 설정을 유지한다.</span>
<span class="nc">String</span> <span class="nf">keyspaceNotificationsConfigParameter</span><span class="o">()</span><span class="k">default</span> <span class="s">"Ex"</span><span class="o">;</span>
</code></pre></div></div>

<p>위의 Redis의 Keyspace Notification 설정에서 보았듯이, Key Expire 이벤트를 수신하기 위해서는 최소한 <code class="language-plaintext highlighter-rouge">Ex</code> 옵션을 설정해야 한다. 이러한 동작을 <code class="language-plaintext highlighter-rouge">@EnableRedisRepositories</code> 어노테이션을 사용하는 것 만으로 수행할 수 있다.</p>

<p>이 옵션 문자열은 <code class="language-plaintext highlighter-rouge">RedisKeyValueAdapter</code> 에서 사용된다.</p>

<h3 id="enablekeyspaceevents-설정">EnableKeyspaceEvents 설정</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Configure usage of {@link KeyExpirationEventMessageListener}.
 *
 * @return
 * @since 1.8
 */</span>
<span class="nc">EnableKeyspaceEvents</span> <span class="nf">enableKeyspaceEvents</span><span class="o">()</span><span class="k">default</span> <span class="nc">EnableKeyspaceEvents</span><span class="o">.</span><span class="na">OFF</span><span class="o">;</span>
</code></pre></div></div>

<p>주석을 살펴보면, <code class="language-plaintext highlighter-rouge">KeyExpirationEventMessageListener</code> 를 사용할 것인지를 설정하는 부분이다. <code class="language-plaintext highlighter-rouge">EnableKeyspaceEvents</code> 는 다음과 같은 Enum 타입이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="nc">EnableKeyspaceEvents</span> <span class="o">{</span>

    <span class="cm">/**
     * Initializes the {@link KeyExpirationEventMessageListener} on startup.
     */</span>
    <span class="c1">// 애플리케이션 시작 시에 KeyExpirationEventMessageListener를 초기화한다.</span>
    <span class="no">ON_STARTUP</span><span class="o">,</span>

    <span class="cm">/**
     * Initializes the {@link KeyExpirationEventMessageListener} on first insert having expiration time set.
     */</span>
    <span class="c1">// 첫번째 expire 시간이 설정된 데이터가 insert 될 때 KeyExpirationEventMessageListener를 초기화한다.</span>
    <span class="no">ON_DEMAND</span><span class="o">,</span>

    <span class="cm">/**
     * Turn {@link KeyExpirationEventMessageListener} usage off. No expiration events will be received.
     */</span>
    <span class="c1">// 사용하지 않는다.</span>
    <span class="no">OFF</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">KeyExpirationEventMessageListener</code> 속성은 실제로 <code class="language-plaintext highlighter-rouge">RedisKeyValueAdapter</code> 에서 다음과 같이 설정된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initKeyExpirationListener</span><span class="o">(){</span>

    <span class="c1">// Expire 이벤트 리스너가 없는 경우</span>
    <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">expirationListener</span><span class="o">.</span><span class="na">get</span><span class="o">()==</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// 기본적인 Expire 이벤트를 처리하는 매핑 리스너 클래스를 생성한다.</span>
        <span class="nc">MappingExpirationListener</span> <span class="n">listener</span><span class="o">=</span><span class="k">new</span> <span class="nc">MappingExpirationListener</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">messageListenerContainer</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">redisOps</span><span class="o">,</span>
        <span class="k">this</span><span class="o">.</span><span class="na">converter</span><span class="o">);</span>
        <span class="c1">// Expire 설정 파라미터 값을 설정한다. (이전에 본 기본값인 "Ex" 또는 별도의 설정 값)</span>
        <span class="n">listener</span><span class="o">.</span><span class="na">setKeyspaceNotificationsConfigParameter</span><span class="o">(</span><span class="n">keyspaceNotificationsConfigParameter</span><span class="o">);</span>

        <span class="c1">// 애플리케이션 이벤트 발행자가 설정되어 있는 경우, 매핑 리스너에 설정한다.</span>
        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">eventPublisher</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
        <span class="n">listener</span><span class="o">.</span><span class="na">setApplicationEventPublisher</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">eventPublisher</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Expire 이벤트 리스너가 설정되어 있지 않은 경우, 매핑 리스너를 초기화 하고 설정한다.</span>
        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">expirationListener</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span><span class="n">listener</span><span class="o">)){</span>
            <span class="n">listener</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 함수를 <code class="language-plaintext highlighter-rouge">ON_STARTUP</code> 으로 설정하면, 애플리케이션 시작 시에 <code class="language-plaintext highlighter-rouge">KeyExpirationEventMessageListener</code> 가 초기화 되고, <code class="language-plaintext highlighter-rouge">ON_DEMAND</code> 로 설정하면, 첫번째 expire 시간이 설정된 데이터가 insert 될 때 <code class="language-plaintext highlighter-rouge">KeyExpirationEventMessageListener</code> 가 초기화 된다.</p>

<h3 id="shadowcopy-설정">ShadowCopy 설정</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Configuration flag controlling storage of phantom keys (shadow copies) of expiring entities to read them later when
 * publishing {@link org.springframework.data.redis.core.RedisKeyspaceEvent keyspace events}.
 *
 * @return
 * @since 2.4
 */</span>
<span class="nc">ShadowCopy</span> <span class="nf">shadowCopy</span><span class="o">()</span><span class="k">default</span> <span class="nc">ShadowCopy</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ShadowCopy</code> 는 다음과 같은 Enum 타입이다. 기본적으로 <code class="language-plaintext highlighter-rouge">DEFAULT</code> 로 설정되어 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Configuration flag controlling storage of phantom keys (shadow copies) of expiring entities to read them later when
 * publishing {@link RedisKeyspaceEvent}.
 *
 * @author Christoph Strobl
 * @since 2.4
 */</span>
<span class="kd">public</span> <span class="kd">enum</span> <span class="nc">ShadowCopy</span> <span class="o">{</span>

    <span class="cm">/**
     * Store shadow copies of expiring entities depending on the {@link EnableKeyspaceEvents}.
     */</span>
    <span class="no">DEFAULT</span><span class="o">,</span>

    <span class="cm">/**
     * Store shadow copies of expiring entities.
     */</span>
    <span class="no">ON</span><span class="o">,</span>

    <span class="cm">/**
     * Do not store shadow copies.
     */</span>
    <span class="no">OFF</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ShadowCopy</code> 가 설정되어 있으면 <code class="language-plaintext highlighter-rouge">RedisKeyValueAdapter</code> 에서 다음과 같이 처리된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">keepShadowCopy</span><span class="o">(){</span>

    <span class="k">switch</span><span class="o">(</span><span class="n">shadowCopy</span><span class="o">){</span>
        <span class="k">case</span> <span class="nl">OFF:</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="k">case</span> <span class="nl">ON:</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">default</span><span class="o">:</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">expirationListener</span><span class="o">.</span><span class="na">get</span><span class="o">()!=</span><span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위의 함수는 <code class="language-plaintext highlighter-rouge">ShadowCopy</code> 가 <code class="language-plaintext highlighter-rouge">ON</code> 이거나 (<code class="language-plaintext highlighter-rouge">DEFAULT</code> 이고 Expire 이벤트 리스너가 있는 경우) <code class="language-plaintext highlighter-rouge">true</code>, 그렇지 않으면 <code class="language-plaintext highlighter-rouge">false</code> 를 반환한다.</p>

<ul>
  <li>put: <code class="language-plaintext highlighter-rouge">keepShadowCopy</code> 가 <code class="language-plaintext highlighter-rouge">true</code> 인 경우, <code class="language-plaintext highlighter-rouge">:phantom</code> 접미사를 가진 키를 생성한다.</li>
  <li>delete: <code class="language-plaintext highlighter-rouge">keepShadowCopy</code> 가 <code class="language-plaintext highlighter-rouge">true</code> 인 경우, <code class="language-plaintext highlighter-rouge">:phantom</code> 접미사를 가진 키를 삭제한다.</li>
  <li>update: <code class="language-plaintext highlighter-rouge">keepShadowCopy</code> 가 <code class="language-plaintext highlighter-rouge">true</code> 인 경우, <code class="language-plaintext highlighter-rouge">TTL</code> 시간이 초과된 경우 <code class="language-plaintext highlighter-rouge">:phantom</code> 접미사를 가진 키를 삭제한다. <code class="language-plaintext highlighter-rouge">TTL</code> 시간이 초과되지 않은 경우, <code class="language-plaintext highlighter-rouge">:phantom</code> 접미사를 가진 키의 값과 <code class="language-plaintext highlighter-rouge">TTL</code> 시간을 업데이트한다.</li>
</ul>

<p>이 옵션이 켜져 있어야 <code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 를 <code class="language-plaintext highlighter-rouge">value</code> 값과 같이 사용할 수 있다. 하지만 문제점으로 <code class="language-plaintext highlighter-rouge">ShadowCopy</code> 가 켜져 있으면, <code class="language-plaintext highlighter-rouge">:phantom</code> 이라는 접미사를 가진 키가 생성되어 메모리 사용량이 증가한다. <code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 를 사용하지 않는다면, <code class="language-plaintext highlighter-rouge">ShadowCopy</code> 를 <code class="language-plaintext highlighter-rouge">OFF</code> 로 설정해야 메모리 사용량을 줄일 수 있다.<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>, <sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">4</a></sup></p>

<p><code class="language-plaintext highlighter-rouge">ShadowCopy</code> 옵션을 사용 시 다음과 같이, <code class="language-plaintext highlighter-rouge">:phantom</code> 이라는 접미사를 가진 키가 생성되는 것을 확인할 수 있다. *
*<code class="language-plaintext highlighter-rouge">phantom</code> 키 값은 원본 키 값보다 5분 (300초) 더 유지된다.**</p>

<p><img src="/img/redis_phantom.png" alt="Redis Phantom" /></p>

<h2 id="왜-rediskeyexpiredevent-이벤트를-사용하는가">왜 <code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 이벤트를 사용하는가?</h2>

<p>여러가지 이유가 있겠지만, 가장 중요한 것은 **개발자의 고통을 크게 줄여줄 수 있기 때문이라고 생각한다
**. 다른 문서나 개발 예시들을 보면 비교적 로우 레벨인 <code class="language-plaintext highlighter-rouge">redisTemplate</code> 를 사용하는 것을 쉽게 볼 수 있는데, <code class="language-plaintext highlighter-rouge">redisTemplate</code>를 사용하기 위해서는 다음과 같은 요구사항들과 과정을 거쳐야한다.</p>

<ul>
  <li>모든 사소한 데이터의 CRUD 작업을 직접 구현해야 한다.</li>
  <li>모든 <code class="language-plaintext highlighter-rouge">TTL</code> 값을 직접 실행해야 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">TTL</code> 값이 초과된 데이터를 직접 관리해야 한다.
    <ul>
      <li>이 때, <code class="language-plaintext highlighter-rouge">TTL</code> 값이 초과된 데이터를 찾기 위해서 반복적으로 조회하거나, 최소한의 모니터링이 필요하다.</li>
    </ul>
  </li>
</ul>

<p>이 부분 중 하나라도 실수가 나거나 누락되면, 데이터가 정상적으로 삭제되지 않고 남아있는 문제가 발생할 수 있다.<br />
이러한 실수를 줄이거나 방지할 수는 있겠지만, 개발자가 실수를 하지 않는다는 것은 불가능하다.</p>

<h2 id="어떻게-rediskeyexpiredevent-가-발행되는가">어떻게 <code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 가 발행되는가?</h2>

<p>이를 이해하기 위해서는 <code class="language-plaintext highlighter-rouge">KeyExpirationEventMessageListener</code> 의 내부 구현을 살펴보면 된다.</p>

<p>이에 앞서 다시 <code class="language-plaintext highlighter-rouge">RedisKeyValueAdapter</code> 의 코드 일부분<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote" rel="footnote">5</a></sup>을 살펴보면 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setApplicationContext</span><span class="o">(</span><span class="nc">ApplicationContext</span> <span class="n">applicationContext</span><span class="o">)</span><span class="kd">throws</span> <span class="nc">BeansException</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">eventPublisher</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>내내 돌고 돌아서, 결국엔 ApplicationContext에서 발행하는 이벤트를 사용하게 된다. 코드를 보면 <code class="language-plaintext highlighter-rouge">ApplicationContext</code> 를 받아서 <code class="language-plaintext highlighter-rouge">eventPublisher</code> 변수에 저장하는 것을 볼 수 있다. 이를 사용하여 <code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 를 발행한다. 직접적으로 발행하는 것은 아니고, <code class="language-plaintext highlighter-rouge">ApplicationContext</code> (정확히는 <code class="language-plaintext highlighter-rouge">ApplicationContext</code> 가 상속하고 있는 <code class="language-plaintext highlighter-rouge">ApplicationEventPublisher</code> 인터페이스) 를 각 이벤트 리스너들에게 넘겨주고, 각 리스너들이 트리거를 당기는 식으로 구현되어 있다.</p>

<p>내부 동작들을 살펴보았으니, 이젠 Key Expire 메시지를 받아 처리하는 리스너를 들여다보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * Copyright 2015-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</span>
<span class="kn">package</span> <span class="nn">org.springframework.data.redis.listener</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationEventPublisher</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationEventPublisherAware</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.connection.Message</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.connection.MessageListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.RedisKeyExpiredEvent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.lang.Nullable</span><span class="o">;</span>

<span class="cm">/**
 * {@link MessageListener} publishing {@link RedisKeyExpiredEvent}s via {@link ApplicationEventPublisher} by listening
 * to Redis keyspace notifications for key expirations.
 *
 * @author Christoph Strobl
 * @since 1.7
 */</span>
<span class="c1">// `ApplicationEventPublisher` 를 통해서 `RedisKeyExpiredEvent` 를 발행하는 `MessageListener` 구현체</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyExpirationEventMessageListener</span> <span class="kd">extends</span> <span class="nc">KeyspaceEventMessageListener</span> <span class="kd">implements</span>
    <span class="nc">ApplicationEventPublisherAware</span> <span class="o">{</span>

    <span class="c1">// `__keyevent@*__:expired` 메시지를 수신하는 `Topic`</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Topic</span> <span class="no">KEYEVENT_EXPIRED_TOPIC</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PatternTopic</span><span class="o">(</span><span class="s">"__keyevent@*__:expired"</span><span class="o">);</span>

    <span class="c1">// `ApplicationEventPublisher` 를 통해서 `RedisKeyExpiredEvent` 를 발행한다. `ApplicationEventPublisher` 는 `ApplicationContext`이다.</span>
    <span class="kd">private</span> <span class="nd">@Nullable</span> <span class="nc">ApplicationEventPublisher</span> <span class="n">publisher</span><span class="o">;</span>

    <span class="cm">/**
     * Creates new {@link MessageListener} for {@code __keyevent@*__:expired} messages.
     *
     * @param listenerContainer must not be {@literal null}.
     */</span>
    <span class="c1">// `KEYEVENT_EXPIRED_TOPIC` 을 구독하는 `MessageListener` 를 생성한다.</span>
    <span class="kd">public</span> <span class="nf">KeyExpirationEventMessageListener</span><span class="o">(</span><span class="nc">RedisMessageListenerContainer</span> <span class="n">listenerContainer</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">listenerContainer</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// `KEYEVENT_EXPIRED_TOPIC` 을 구독한다.</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doRegister</span><span class="o">(</span><span class="nc">RedisMessageListenerContainer</span> <span class="n">listenerContainer</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">listenerContainer</span><span class="o">.</span><span class="na">addMessageListener</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="no">KEYEVENT_EXPIRED_TOPIC</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 메시지 수신 시, 메시지의 바디를 `RedisKeyExpiredEvent` 로 변환하여 `ApplicationEventPublisher` 를 통해 발행한다.</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doHandleMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">publishEvent</span><span class="o">(</span><span class="k">new</span> <span class="nc">RedisKeyExpiredEvent</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">getBody</span><span class="o">()));</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Publish the event in case an {@link ApplicationEventPublisher} is set.
     *
     * @param event can be {@literal null}.
     */</span>
    <span class="c1">// `ApplicationEventPublisher` 를 통해 `RedisKeyExpiredEvent` 를 발행한다.</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">publishEvent</span><span class="o">(</span><span class="nc">RedisKeyExpiredEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">publisher</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">publisher</span><span class="o">.</span><span class="na">publishEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// `ApplicationEventPublisher` 를 주입 받는다.</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setApplicationEventPublisher</span><span class="o">(</span><span class="nc">ApplicationEventPublisher</span> <span class="n">applicationEventPublisher</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">publisher</span> <span class="o">=</span> <span class="n">applicationEventPublisher</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>코드를 보면 알 수 있듯이, 이전에 말한 다음 과정을 통해 이벤트가 발행된다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">ApplicationEventPublisher</code> (실 객체는 <code class="language-plaintext highlighter-rouge">ApplicationContext</code> 구현체) 를 주입받는다.</li>
  <li>Keyspace notification 메시지 (Key Expire) 를 전달받는다.</li>
  <li><code class="language-plaintext highlighter-rouge">RedisKeyValueAdapter</code> 내부에 있는 정적 클래스인 <code class="language-plaintext highlighter-rouge">MappingExpirationListener</code> 클래스에게 Key Expire 이벤트 처리를 위임한다.</li>
  <li><code class="language-plaintext highlighter-rouge">MappingExpirationListener</code> 클래스는 전달받은 메시지 객체를 내부에 있는 컨버터를 사용해서 변환하고, 레디스 관련 작업을 마무리한다.</li>
  <li><code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 이벤트 객체를 변환한 값을 통해 생성한다.</li>
  <li>생성한 <code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 이벤트를 트리거한다.</li>
  <li><code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 이벤트 리스너들이 이를 처리한다.</li>
</ol>

<h2 id="어떻게-rediskeyexpiredevent-를-사용하는가">어떻게 <code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 를 사용하는가?</h2>

<p><code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 를 사용하는 방법은 크게 두 가지로 나눌 수 있다. 다른 방법이 더 있겠지만, 너무 복잡해서 굳이 다루지는 않는다.</p>

<h3 id="keyexpirationeventmessagelistener-를-직접-상속-구현"><code class="language-plaintext highlighter-rouge">KeyExpirationEventMessageListener</code> 를 직접 상속, 구현</h3>

<p><code class="language-plaintext highlighter-rouge">RedisKeyValueAdapter</code> 의 내부에서 사용되는 <code class="language-plaintext highlighter-rouge">KeyExpirationEventMessageListener</code> 를 구현하는 리스너의 예시 코드를 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">class</span> <span class="nc">MappingExpirationListener</span> <span class="kd">extends</span> <span class="nc">KeyExpirationEventMessageListener</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisOperations</span><span class="o">&lt;?,</span> <span class="o">?&gt;</span> <span class="n">ops</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisConverter</span> <span class="n">converter</span><span class="o">;</span>

    <span class="cm">/**
     * Creates new {@link MappingExpirationListener}.
     *
     * @param listenerContainer
     * @param ops
     * @param converter
     */</span>
    <span class="nc">MappingExpirationListener</span><span class="o">(</span>
        <span class="nc">RedisMessageListenerContainer</span> <span class="n">listenerContainer</span><span class="o">,</span> <span class="nc">RedisOperations</span><span class="o">&lt;?,</span> <span class="o">?&gt;</span> <span class="n">ops</span><span class="o">,</span>
        <span class="nc">RedisConverter</span> <span class="n">converter</span>
    <span class="o">)</span> <span class="o">{</span>

        <span class="kd">super</span><span class="o">(</span><span class="n">listenerContainer</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">ops</span> <span class="o">=</span> <span class="n">ops</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">converter</span> <span class="o">=</span> <span class="n">converter</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">if</span> <span class="o">(!</span><span class="n">isKeyExpirationMessage</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>

        <span class="kt">byte</span><span class="o">[]</span> <span class="n">phantomKey</span> <span class="o">=</span> <span class="nc">ByteUtils</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span>
            <span class="n">key</span><span class="o">,</span>
            <span class="n">converter</span><span class="o">.</span><span class="na">getConversionService</span><span class="o">().</span><span class="na">convert</span><span class="o">(</span><span class="nc">KeyspaceIdentifier</span><span class="o">.</span><span class="na">PHANTOM_SUFFIX</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[].</span><span class="na">class</span><span class="o">)</span>
        <span class="o">);</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[],</span> <span class="kt">byte</span><span class="o">[]&gt;</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">ops</span><span class="o">.</span><span class="na">execute</span><span class="o">((</span><span class="nc">RedisCallback</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[],</span> <span class="kt">byte</span><span class="o">[]&gt;&gt;)</span> <span class="n">connection</span> <span class="o">-&gt;</span> <span class="o">{</span>

            <span class="nc">Map</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[],</span> <span class="kt">byte</span><span class="o">[]&gt;</span> <span class="n">hash1</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">hGetAll</span><span class="o">(</span><span class="n">phantomKey</span><span class="o">);</span>

            <span class="k">if</span> <span class="o">(!</span><span class="nc">CollectionUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">hash1</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">connection</span><span class="o">.</span><span class="na">del</span><span class="o">(</span><span class="n">phantomKey</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="n">hash1</span><span class="o">;</span>
        <span class="o">});</span>

        <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="nc">CollectionUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">hash</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">converter</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="nc">Object</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">RedisData</span><span class="o">(</span><span class="n">hash</span><span class="o">));</span>

        <span class="kt">byte</span><span class="o">[]</span> <span class="n">channelAsBytes</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">channel</span> <span class="o">=</span> <span class="o">!</span><span class="nc">ObjectUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">channelAsBytes</span><span class="o">)</span>
            <span class="o">?</span> <span class="n">converter</span><span class="o">.</span><span class="na">getConversionService</span><span class="o">().</span><span class="na">convert</span><span class="o">(</span><span class="n">channelAsBytes</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
            <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>

        <span class="nc">RedisKeyExpiredEvent</span> <span class="n">event</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisKeyExpiredEvent</span><span class="o">(</span><span class="n">channel</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>

        <span class="n">ops</span><span class="o">.</span><span class="na">execute</span><span class="o">((</span><span class="nc">RedisCallback</span><span class="o">&lt;</span><span class="nc">Void</span><span class="o">&gt;)</span> <span class="n">connection</span> <span class="o">-&gt;</span> <span class="o">{</span>

            <span class="n">connection</span><span class="o">.</span><span class="na">sRem</span><span class="o">(</span><span class="n">converter</span><span class="o">.</span><span class="na">getConversionService</span><span class="o">().</span><span class="na">convert</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getKeyspace</span><span class="o">(),</span> <span class="kt">byte</span><span class="o">[].</span><span class="na">class</span><span class="o">),</span> <span class="n">event</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
            <span class="k">new</span> <span class="nf">IndexWriter</span><span class="o">(</span><span class="n">connection</span><span class="o">,</span> <span class="n">converter</span><span class="o">).</span><span class="na">removeKeyFromIndexes</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getKeyspace</span><span class="o">(),</span> <span class="n">event</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">});</span>

        <span class="n">publishEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isKeyExpirationMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">BinaryKeyspaceIdentifier</span><span class="o">.</span><span class="na">isValid</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">getBody</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>보기만 해도 복잡하다.</p>

<p>대략 다음과 같은 일들을 하고 있음을 알 수 있다.</p>

<ul>
  <li>Redis에서 <code class="language-plaintext highlighter-rouge">__keyevent@*__:expired</code> 메시지를 수신한다.</li>
  <li>메시지를 <code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 로 변환하고, 발행한다.</li>
  <li>불필요한 <code class="language-plaintext highlighter-rouge">PhantomKey</code> 를 삭제한다.</li>
</ul>

<p>이와 유사한 방식으로 <code class="language-plaintext highlighter-rouge">KeyExpirationEventMessageListener</code> 를 상속받아 구현한 후에, <code class="language-plaintext highlighter-rouge">RedisMessageListenerContainer</code> 를 주입받아서 사용하면 된다.<sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote" rel="footnote">6</a></sup></p>

<p>나는 매우 게으른 사람이기에 위 방법을 사용하지 않는다.</p>

<h3 id="rediskeyexpiredevent-를-eventlistener-로-처리"><code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 를 <code class="language-plaintext highlighter-rouge">@EventListener</code> 로 처리</h3>

<p>매우 간편하고 실용적인 방법이다.</p>

<p>관련하여 본인이 직접 작성한 미천한 테스트 코드를 보자.</p>

<h4 id="domainjava">Domain.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.example.ideas.expired.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.annotation.Id</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.RedisHash</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Value</span><span class="o">;</span>


<span class="nd">@RedisHash</span><span class="o">(</span><span class="n">timeToLive</span> <span class="o">=</span> <span class="mi">2L</span><span class="o">)</span>
<span class="nd">@Value</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Domain</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Domain</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="domainrepositoryjava">DomainRepository.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.example.ideas.expired.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.repository.CrudRepository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.example.ideas.expired.domain.Domain</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DomainRepository</span> <span class="kd">extends</span> <span class="nc">CrudRepository</span><span class="o">&lt;</span><span class="nc">Domain</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>

<span class="o">}</span>
</code></pre></div></div>

<h4 id="dumbjava">Dumb.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.example.ideas.expired.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.annotation.Id</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.RedisHash</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Value</span><span class="o">;</span>

<span class="nd">@RedisHash</span><span class="o">(</span><span class="n">timeToLive</span> <span class="o">=</span> <span class="mi">3L</span><span class="o">)</span>
<span class="nd">@Value</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dumb</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>


    <span class="nd">@Id</span>
    <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nc">Double</span> <span class="n">value</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Dumb</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">Double</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="dumbrepositoryjava">DumbRepository.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.example.ideas.expired.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.repository.CrudRepository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.example.ideas.expired.domain.Dumb</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DumbRepository</span> <span class="kd">extends</span> <span class="nc">CrudRepository</span><span class="o">&lt;</span><span class="nc">Dumb</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>

<span class="o">}</span>
</code></pre></div></div>

<h4 id="redistemplateconfigjava">RedisTemplateConfig.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.example.ideas.expired.config</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.data.redis.RedisProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.connection.RedisConnectionFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.RedisTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.serializer.StringRedisSerializer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisTemplateConfig</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisProperties</span> <span class="n">redisProperties</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">RedisConnectionFactory</span> <span class="nf">lettuceConnectionFactory</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">LettuceConnectionFactory</span><span class="o">(</span><span class="n">redisProperties</span><span class="o">.</span><span class="na">getHost</span><span class="o">(),</span> <span class="n">redisProperties</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">redisTemplate</span><span class="o">(</span><span class="nc">RedisConnectionFactory</span> <span class="n">connectionFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisTemplate</span><span class="o">&lt;&gt;();</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">);</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setValueSerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">GenericJackson2JsonRedisSerializer</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="expiredlistenerjava">ExpiredListener.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.example.ideas.expired.listener</span><span class="o">;</span>


<span class="kn">import</span> <span class="nn">org.springframework.context.event.EventListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.RedisKeyExpiredEvent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.example.ideas.expired.domain.Domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>

<span class="nd">@Slf4j</span>
<span class="nd">@Component</span>
<span class="nd">@Getter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExpiredListener</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">domainCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">othersCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="nd">@EventListener</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleExpiredEvent</span><span class="o">(</span><span class="nc">RedisKeyExpiredEvent</span><span class="o">&lt;</span><span class="nc">Domain</span><span class="o">&gt;</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getValue</span><span class="o">()</span> <span class="k">instanceof</span> <span class="nc">Domain</span> <span class="n">domainValue</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Domain event received: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">);</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Domain event source: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getSource</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Domain event keyspace: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getKeyspace</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Domain event channel: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getChannel</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Domain event id: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Domain event timestamp: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getTimestamp</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Domain event class: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Domain event value: {}"</span><span class="o">,</span> <span class="n">domainValue</span><span class="o">);</span>
            <span class="n">domainCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Unknown event received: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">);</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Unknown event source: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getSource</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Unknown event keyspace: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getKeyspace</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Unknown event channel: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getChannel</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Unknown event id: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Unknown event timestamp: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getTimestamp</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Unknown event class: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Unknown event value: {}"</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
            <span class="n">othersCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">resetCount</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">domainCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">othersCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="redisexpiredtestjava">RedisExpiredTest.java</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.example.ideas.expired</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.test.context.SpringBootTest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Import</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.BeforeEach</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.example.ideas.expired.config.EmbeddedRedisConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.example.ideas.expired.config.RedisConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.example.ideas.expired.domain.Domain</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.example.ideas.expired.domain.Dumb</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.example.ideas.expired.listener.ExpiredListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.example.ideas.expired.repository.DomainRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.example.ideas.expired.repository.DumbRepository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>

<span class="nd">@SpringBootTest</span>
<span class="c1">// server 또는 embedded 를 선택한다. 프로필로 설정한다.</span>
<span class="nd">@Import</span><span class="o">({</span><span class="nc">RedisConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">EmbeddedRedisConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisExpiredTest</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">DomainRepository</span> <span class="n">domainRepository</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">DumbRepository</span> <span class="n">dumbRepository</span><span class="o">;</span>

    <span class="c1">// Expire 이벤트를 받는 리스너를 주입받는다.</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">ExpiredListener</span> <span class="n">expiredListener</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Domain</span> <span class="n">domain</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Domain</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="s">"test"</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Dumb</span> <span class="n">dumb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dumb</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="mf">42.0</span><span class="o">);</span>

    <span class="c1">// 테스트가 시작되기 전에 모든 데이터를 삭제하고, 리스너의 카운트를 초기화한다.</span>
    <span class="nd">@BeforeEach</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">domainRepository</span><span class="o">.</span><span class="na">deleteAll</span><span class="o">();</span>
        <span class="n">dumbRepository</span><span class="o">.</span><span class="na">deleteAll</span><span class="o">();</span>
        <span class="n">expiredListener</span><span class="o">.</span><span class="na">resetCount</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">domainExpiredTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="c1">// given</span>
        <span class="c1">// 2초 후에 만료되는 도메인을 저장한다.</span>
        <span class="n">domainRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">domain</span><span class="o">);</span>

        <span class="c1">// 저장된 도메인의 개수는 1개이다.</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">domainRepository</span><span class="o">.</span><span class="na">count</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="c1">// 리스너의 도메인 카운트는 0이다. (아직 만료되지 않았기 때문)</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">expiredListener</span><span class="o">.</span><span class="na">getDomainCount</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">expiredListener</span><span class="o">.</span><span class="na">getOthersCount</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

        <span class="c1">// when</span>
        <span class="c1">// 3초 후에 만료된 도메인을 조회한다. (2초로 하면 이벤트 처리 과정이 약간 늦어 실패하는 경우가 있다.)</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>

        <span class="c1">// then</span>
        <span class="c1">// 도메인의 개수는 0개이다. (만료되었기 때문)</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">domainRepository</span><span class="o">.</span><span class="na">count</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="c1">// 리스너의 도메인 Expire 카운트는 1이다.</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">expiredListener</span><span class="o">.</span><span class="na">getDomainCount</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="c1">// 리스너의 기타 Expire 카운트는 0이다.</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">expiredListener</span><span class="o">.</span><span class="na">getOthersCount</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">mixedTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="c1">// given</span>
        <span class="c1">// 2초 후에 만료되는 도메인과 3초 후에 만료되는 다른 도메인 객체를 설정한다.</span>
        <span class="n">dumbRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">dumb</span><span class="o">);</span>
        <span class="n">domainRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">domain</span><span class="o">);</span>

        <span class="c1">// 저장된 도메인의 개수는 1개이다.</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">domainRepository</span><span class="o">.</span><span class="na">count</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="c1">// 저장된 다른 도메인의 개수는 1개이다.</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">dumbRepository</span><span class="o">.</span><span class="na">count</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="c1">// 리스너의 도메인 카운트는 0이다. (아직 만료되지 않았기 때문)</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">expiredListener</span><span class="o">.</span><span class="na">getDomainCount</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="c1">// 리스너의 기타 카운트는 0이다. (아직 만료되지 않았기 때문)</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">expiredListener</span><span class="o">.</span><span class="na">getOthersCount</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

        <span class="c1">// when</span>
        <span class="c1">// 4초 후에 만료된 도메인들을 조회한다.</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">4000</span><span class="o">);</span>

        <span class="c1">// then</span>
        <span class="c1">// 도메인의 개수는 삭제되어 0개이다.</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">domainRepository</span><span class="o">.</span><span class="na">count</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="c1">// 다른 도메인의 개수도 삭제되어 0개이다.</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">dumbRepository</span><span class="o">.</span><span class="na">count</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="c1">// 리스너의 도메인 Expire 카운트는 1이다.</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">expiredListener</span><span class="o">.</span><span class="na">getDomainCount</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="c1">// 리스너의 기타 Expire 카운트는 1이다.</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">expiredListener</span><span class="o">.</span><span class="na">getOthersCount</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>테스트를 실행해보면 다음과 같은 결과를 얻을 수 있다.</p>

<h4 id="도메인-단독-expire-테스트-domainexpiredtest">도메인 단독 expire 테스트 (<code class="language-plaintext highlighter-rouge">domainExpiredTest</code>)</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2023-03-14T18:30:58.395+09:00  INFO 173173 --- [enerContainer-1] c.e.i.expired.listener.ExpiredListener   : Domain event received: RedisKeyExpiredEvent [keyspace=com.example.ideas.expired.domain.Domain, id=1]
2023-03-14T18:30:58.398+09:00  INFO 173173 --- [enerContainer-1] c.e.i.expired.listener.ExpiredListener   : Domain event source: [99, 111, 109, 46, 101, 120, 97, 109, 112, 108, 101, 46, 105, 100, 101, 97, 115, 46, 101, 120, 112, 105, 114, 101, 100, 46, 100, 111, 109, 97, 105, 110, 46, 68, 111, 109, 97, 105, 110, 58, 49]
2023-03-14T18:30:58.398+09:00  INFO 173173 --- [enerContainer-1] c.e.i.expired.listener.ExpiredListener   : Domain event keyspace: com.example.ideas.expired.domain.Domain
2023-03-14T18:30:58.398+09:00  INFO 173173 --- [enerContainer-1] c.e.i.expired.listener.ExpiredListener   : Domain event channel: __keyevent@0__:expired
2023-03-14T18:30:58.398+09:00  INFO 173173 --- [enerContainer-1] c.e.i.expired.listener.ExpiredListener   : Domain event id: [49]
2023-03-14T18:30:58.398+09:00  INFO 173173 --- [enerContainer-1] c.e.i.expired.listener.ExpiredListener   : Domain event timestamp: 1678786258391
2023-03-14T18:30:58.398+09:00  INFO 173173 --- [enerContainer-1] c.e.i.expired.listener.ExpiredListener   : Domain event class: class org.springframework.data.redis.core.RedisKeyExpiredEvent
2023-03-14T18:30:58.398+09:00  INFO 173173 --- [enerContainer-1] c.e.i.expired.listener.ExpiredListener   : Domain event value: Domain(id=1, name=test)
</code></pre></div></div>

<h4 id="다른-도메인과-함께-expire-테스트-mixedtest">다른 도메인과 함께 expire 테스트 (<code class="language-plaintext highlighter-rouge">mixedTest</code>)</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2023-03-14T18:31:01.391+09:00  INFO 173173 --- [enerContainer-2] c.e.i.expired.listener.ExpiredListener   : Domain event received: RedisKeyExpiredEvent [keyspace=com.example.ideas.expired.domain.Domain, id=1]
2023-03-14T18:31:01.392+09:00  INFO 173173 --- [enerContainer-2] c.e.i.expired.listener.ExpiredListener   : Domain event source: [99, 111, 109, 46, 101, 120, 97, 109, 112, 108, 101, 46, 105, 100, 101, 97, 115, 46, 101, 120, 112, 105, 114, 101, 100, 46, 100, 111, 109, 97, 105, 110, 46, 68, 111, 109, 97, 105, 110, 58, 49]
2023-03-14T18:31:01.392+09:00  INFO 173173 --- [enerContainer-2] c.e.i.expired.listener.ExpiredListener   : Domain event keyspace: com.example.ideas.expired.domain.Domain
2023-03-14T18:31:01.392+09:00  INFO 173173 --- [enerContainer-2] c.e.i.expired.listener.ExpiredListener   : Domain event channel: __keyevent@0__:expired
2023-03-14T18:31:01.392+09:00  INFO 173173 --- [enerContainer-2] c.e.i.expired.listener.ExpiredListener   : Domain event id: [49]
2023-03-14T18:31:01.392+09:00  INFO 173173 --- [enerContainer-2] c.e.i.expired.listener.ExpiredListener   : Domain event timestamp: 1678786261388
2023-03-14T18:31:01.392+09:00  INFO 173173 --- [enerContainer-2] c.e.i.expired.listener.ExpiredListener   : Domain event class: class org.springframework.data.redis.core.RedisKeyExpiredEvent
2023-03-14T18:31:01.393+09:00  INFO 173173 --- [enerContainer-2] c.e.i.expired.listener.ExpiredListener   : Domain event value: Domain(id=1, name=test)
2023-03-14T18:31:02.389+09:00  INFO 173173 --- [enerContainer-3] c.e.i.expired.listener.ExpiredListener   : Unknown event received: RedisKeyExpiredEvent [keyspace=com.example.ideas.expired.domain.Dumb, id=1]
2023-03-14T18:31:02.389+09:00  INFO 173173 --- [enerContainer-3] c.e.i.expired.listener.ExpiredListener   : Unknown event source: [99, 111, 109, 46, 101, 120, 97, 109, 112, 108, 101, 46, 105, 100, 101, 97, 115, 46, 101, 120, 112, 105, 114, 101, 100, 46, 100, 111, 109, 97, 105, 110, 46, 68, 117, 109, 98, 58, 49]
2023-03-14T18:31:02.389+09:00  INFO 173173 --- [enerContainer-3] c.e.i.expired.listener.ExpiredListener   : Unknown event keyspace: com.example.ideas.expired.domain.Dumb
2023-03-14T18:31:02.389+09:00  INFO 173173 --- [enerContainer-3] c.e.i.expired.listener.ExpiredListener   : Unknown event channel: __keyevent@0__:expired
2023-03-14T18:31:02.389+09:00  INFO 173173 --- [enerContainer-3] c.e.i.expired.listener.ExpiredListener   : Unknown event id: [49]
2023-03-14T18:31:02.389+09:00  INFO 173173 --- [enerContainer-3] c.e.i.expired.listener.ExpiredListener   : Unknown event timestamp: 1678786262389
2023-03-14T18:31:02.389+09:00  INFO 173173 --- [enerContainer-3] c.e.i.expired.listener.ExpiredListener   : Unknown event class: class org.springframework.data.redis.core.RedisKeyExpiredEvent
2023-03-14T18:31:02.390+09:00  INFO 173173 --- [enerContainer-3] c.e.i.expired.listener.ExpiredListener   : Unknown event value: Dumb(id=1, value=42.0)
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent&lt;Domain&gt;</code> 클래스로 파라미터를 명시했음에도 불구하고, <code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent&lt;Dumb&gt;</code> 이벤트도 받아서 처리함을 확인할 수 있다. 물론 RedisKeyExpiredEvent 를 상속해서 Predicate 등을 섞고, 이를 보완하는 이벤트 리스너를 만들 수는 있겠지만, 다른 사람이 보기에 이게 뭔가 싶을테니 굳이 그럴 필요가 있을까…싶은 생각이다.</p>

<h2 id="결론">결론</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Spring Data Redis</code>를 사용하면 <code class="language-plaintext highlighter-rouge">Redis</code>의 <code class="language-plaintext highlighter-rouge">keyspace notification</code>을 이용하여 <code class="language-plaintext highlighter-rouge">expire</code> 이벤트를 받을 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">Keyspace</code> 옵션 (<code class="language-plaintext highlighter-rouge">enableKeyspaceEvents</code>) 을 켠 경우, <code class="language-plaintext highlighter-rouge">Phantom</code> 키 값을 사용하여 <code class="language-plaintext highlighter-rouge">expire</code> 이벤트 발생 시 <code class="language-plaintext highlighter-rouge">key</code>, <code class="language-plaintext highlighter-rouge">value</code> 모두를 완전하게 이벤트 형식으로 받을 수 있다</li>
  <li>이 때, <code class="language-plaintext highlighter-rouge">Phantom</code> 키 값이 중복으로 사용되어 <code class="language-plaintext highlighter-rouge">redisTemplate</code> 사용 대비 메모리를 많이 소모한다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Expire</code> 이벤트를 사용하지 않는다면, <code class="language-plaintext highlighter-rouge">Keyspace</code> 이벤트와 <code class="language-plaintext highlighter-rouge">Phantom</code> 키 값을 사용하지 않도록 설정하는 것이 메모리 최적화에 도움이 된다.</li>
      <li><code class="language-plaintext highlighter-rouge">Keyspace</code> 옵션이 켜져 있는 경우, <code class="language-plaintext highlighter-rouge">shadowCopy</code> 옵션에 따라 두 가지로 분기된다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">shadowCopy</code> 값이 <code class="language-plaintext highlighter-rouge">DEFAULT</code> 또는 <code class="language-plaintext highlighter-rouge">ON</code> 일 경우 <code class="language-plaintext highlighter-rouge">Phantom</code> 키 값을 추가로 사용하여 만료된 도메인 객체를 받을 수 있다.</li>
          <li><code class="language-plaintext highlighter-rouge">shadowCopy</code> 값이 <code class="language-plaintext highlighter-rouge">OFF</code> 일 경우 <code class="language-plaintext highlighter-rouge">Phantom</code> 키 값을 사용하지 않고 만료된 키 값만 반환된다.</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code>를 사용해서 <code class="language-plaintext highlighter-rouge">TTL</code>이 만료된 도메인 객체를 온전하게 받을 수 있다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">KeyExpirationEventMessageListener</code> 리스너 클래스를 상속, 구현하여 이벤트 컨테이너에 등록하여 이벤트를 수신할 수 있다.</li>
          <li><code class="language-plaintext highlighter-rouge">@EventListener</code> 어노테이션과 <code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 클래스를 사용하여 이벤트를 수신할 수 있다.
            <ul>
              <li>단, <code class="language-plaintext highlighter-rouge">RedisKeyExpiredEvent</code> 이벤트를 수신하더라도 특정 도메인 객체만을 수신할 수 없으므로 <code class="language-plaintext highlighter-rouge">value</code> 값 등을 사용하여 추가적으로 검증하여야 한다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">AWS ElasticCache</code>를 사용하는 경우, <code class="language-plaintext highlighter-rouge">CONFIG</code> 명령어를 사용할 수 없어 <code class="language-plaintext highlighter-rouge">notify-keyspace-events</code> 변경을 다른 방법으로 해야 한다.<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote" rel="footnote">7</a></sup>, <sup id="fnref:8" role="doc-noteref"><a href="#fn:8" class="footnote" rel="footnote">8</a></sup></li>
</ul>

<h2 id="reference">Reference</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://redis.io/docs/manual/keyspace-notifications">https://redis.io/docs/manual/keyspace-notifications</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://github.com/spring-projects/spring-data-redis/blob/main/src/main/java/org/springframework/data/redis/repository/configuration/EnableRedisRepositories.java#L56">https://github.com/spring-projects/spring-data-redis/blob/main/src/main/java/org/springframework/data/redis/repository/configuration/EnableRedisRepositories.java#L56</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><a href="https://engineering.salesforce.com/lessons-learned-using-spring-data-redis-f3121f89bff9">https://engineering.salesforce.com/lessons-learned-using-spring-data-redis-f3121f89bff9</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p><a href="https://hyperconnect.github.io/2022/12/12/fix-increasing-memory-usage.html">https://hyperconnect.github.io/2022/12/12/fix-increasing-memory-usage.html</a> <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p><a href="https://github.com/spring-projects/spring-data-redis/blob/main/src/main/java/org/springframework/data/redis/core/RedisKeyValueAdapter.java#L722-L725">https://github.com/spring-projects/spring-data-redis/blob/a7d39147cf3f9649b0609a10fc43e5672c732193/src/main/java/org/springframework/data/redis/core/RedisKeyValueAdapter.java#L722-L725</a> <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p><a href="https://github.com/spring-projects/spring-data-redis/blob/a7d39147cf3f9649b0609a10fc43e5672c732193/src/main/java/org/springframework/data/redis/listener/KeyExpirationEventMessageListener.java#L44-L46">https://github.com/spring-projects/spring-data-redis/blob/a7d39147cf3f9649b0609a10fc43e5672c732193/src/main/java/org/springframework/data/redis/listener/KeyExpirationEventMessageListener.java#L44-L46</a> <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p><a href="https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#redis.repositories.expirations">https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#redis.repositories.expirations</a> <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:8" role="doc-endnote">
      <p><a href="https://stackoverflow.com/questions/57046175/startup-error-using-spring-boot-starter-data-redis-on-aws-using-ssl">https://stackoverflow.com/questions/57046175/startup-error-using-spring-boot-starter-data-redis-on-aws-using-ssl</a> <a href="#fnref:8" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>cda2</name></author><category term="Spring" /><category term="Redis" /><summary type="html"><![CDATA[스프링에서는 Redis의 Key Expire (Keyspace) 이벤트를 활용할 수 있다. 내부 구현을 통해 이벤트를 발생시키는 방법을 알아보자.]]></summary></entry><entry><title type="html">Kime</title><link href="https://cda2.github.io/linux/kime/2023/03/14/Kime.html" rel="alternate" type="text/html" title="Kime" /><published>2023-03-14T10:14:24+00:00</published><updated>2023-03-14T10:14:24+00:00</updated><id>https://cda2.github.io/linux/kime/2023/03/14/Kime</id><content type="html" xml:base="https://cda2.github.io/linux/kime/2023/03/14/Kime.html"><![CDATA[<p>최근 리눅스에서 많이 사용한다길래 써보고 있다.
우분투에서 iBus를 사용하며 골머리를 많이 썩어서 Kime를 사용해 보았고, 상당히 쾌적했다.</p>

<h3 id="공식-문서">공식 문서</h3>

<ul>
  <li><a href="https://github.com/Riey/kime/blob/develop/README.ko.md">README</a></li>
  <li><a href="https://github.com/Riey/kime/blob/develop/docs/CONFIGURATION.ko.md">설정 문서</a></li>
</ul>

<h3 id="snap-환경-내의-프로그램에서의-미작동">Snap 환경 내의 프로그램에서의 미작동</h3>

<p>아직 Snap 환경 내에서 잘 호환되지는 않는 것 같다.</p>

<ul>
  <li><a href="https://github.com/Riey/kime/wiki/FAQ">FAQ</a></li>
  <li><a href="https://github.com/Riey/kime/issues/567">이슈#567</a></li>
  <li>내 경우, 기본 설치되어 있는 파이어폭스에서는 한영 전환이 AltR 키로는 안되고, Shift-Space 조합으로는 작동했다.</li>
  <li>Jetbrain IDE 들은 Toolbox를 사용하여 구동하니 정상 작동한다.
    <ul>
      <li>Toolbox에서 설치 시에는 비 Snap 환경인걸까? 잘 모르겠다.</li>
    </ul>
  </li>
</ul>

<h3 id="초성-연타-시-쌍자음-처리">초성 연타 시 쌍자음 처리</h3>

<p>두 개 이상의 초성을 연타 시 쌍자음으로 만들어주는 기능이다.
시프트를 안 눌러도 되니 편하긴 한데, 막상 채팅 시 불편해서 나는 끈다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ㄱ + ㄱ = ㄲ
ㄷ + ㄷ = ㄸ
ㅅ + ㅅ = ㅆ
</code></pre></div></div>

<p>끄려면 설정 내 해당 기능 부분을 주석 처리하면 된다.
기본 설정에서 다음과 같은 부분이 있다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">all</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">ComposeChoseongSsang</span>
<span class="na">dubeolsik</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">TreatJongseongAsChoseong</span>
</code></pre></div></div>

<p>이 부분 중 <code class="language-plaintext highlighter-rouge">ComposeChoseongSsang</code> 부분을 주석 처리 해준다.
나는 다른 옵션을 안 써서 그냥 all 전체를 주석 처리했다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># all:</span>
<span class="c1"># - ComposeChoseongSsang</span>
<span class="na">dubeolsik</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">TreatJongseongAsChoseong</span>
</code></pre></div></div>

<p>다른 기능을 쓸 거면 <code class="language-plaintext highlighter-rouge">ComposeChoseongSsang</code> 부분만 없애거나 주석 처리하고, <a href="https://github.com/Riey/kime/blob/develop/docs/CONFIGURATION.ko.md">설정 문서</a>를 참고해서 <code class="language-plaintext highlighter-rouge">all</code> 항목 밑에 목록을 추가하면 잘 작동한다.</p>

<h3 id="개인적인-생각">개인적인 생각</h3>

<ul>
  <li>내가 경험한 문제 중 Snap에서 미작동하는 경우가 대부분이다.
    <ul>
      <li><strong>설정, 빠른 검색 창 등에서 한영 전환이 안된다.</strong></li>
      <li>데비안 기반 배포판 사용 시 불편한 부분이 느껴질 것 같다.</li>
      <li>다른 리눅스 배포판에서 사용 시 흠 잡을 부분이 없어보인다. 빠르고, 키 호환 잘 되고..</li>
    </ul>
  </li>
  <li>Shift + AltR 은 토글이 안되는데 되면 좋겠다. Shift-Space 조합은 불편한 것 같다.</li>
</ul>]]></content><author><name>cda2</name></author><category term="Linux" /><category term="Kime" /><summary type="html"><![CDATA[최근 리눅스에서 많이 사용한다길래 써보고 있다. 우분투에서 iBus를 사용하며 골머리를 많이 썩어서 Kime를 사용해 보았고, 상당히 쾌적했다.]]></summary></entry></feed>